{"version":3,"sources":["webpack://typedjson/webpack/universalModuleDefinition","webpack://typedjson/webpack/bootstrap","webpack://typedjson/./src/typedjson/helpers.ts","webpack://typedjson/./src/typedjson/metadata.ts","webpack://typedjson/./src/typedjson/deserializer.ts","webpack://typedjson/./src/typedjson/serializer.ts","webpack://typedjson/./src/typedjson/json-object.ts","webpack://typedjson/./src/typedjson/json-member.ts","webpack://typedjson/./src/typedjson/json-array-member.ts","webpack://typedjson/./src/typedjson/json-set-member.ts","webpack://typedjson/./src/typedjson/json-map-member.ts","webpack://typedjson/./src/typedjson.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","METADATA_FIELD_KEY","isDirectlySerializableNativeType","type","Date","Number","String","Boolean","indexOf","isTypeTypedArray","Float32Array","Float64Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","parseToJSObject","json","expectedType","jsonStr","expectsTypesSerializedAsStrings","ArrayBuffer","DataView","hasQuotes","length","isInteger","test","trim","shouldOmitParseString","JSON","parse","isSubtypeOf","A","B","logError","message","optionalParams","_i","arguments","console","error","apply","concat","log","logWarning","warn","isValueDefined","isInstanceOf","constructor","isObject","isReflectMetadataSupported","Reflect","getMetadata","nameof","fn","metadata_JsonObjectMetadata","JsonObjectMetadata","classType","dataMembers","Map","knownTypes","Set","isExplicitlyMarked","isHandledWithoutAnnotation","getJsonObjectName","ctor","metadata","getFromConstructor","doesHandleWithoutAnnotation","primitiveMeta","getKnownTypeNameFromType","injectMetadataInformation","propKey","objectMetadata","decoratorName","deserializer","parentMetadata","forEach","_metadata","_propKey","set","writable","add","keyType","elementType","elemCtor","deserializer_Deserializer","Deserializer","_typeResolver","sourceObject","__type","_errorHandler","setNameResolver","nameResolverCallback","_nameResolver","setTypeResolver","typeResolverCallback","TypeError","setErrorHandler","errorHandlerCallback","convertAsObject","sourceObjectTypeInfo","objectName","_this","expectedSelfType","selfConstructor","sourceObjectMetadata","knownTypeConstructors","_mergeKnownTypes","_createKnownTypesMap","typeFromTypeHint","sourceMetadata_1","sourceObjectWithDeserializedProperties_1","memberMetadata","revivedValue","memberValue","memberNameForDebug","convertSingleValue","elementConstructor","keyConstructor","key","isRequired","targetObject","initializerCallback","e","_instantiateType","assign","onDeserializedMethodName","targetObject_1","keys","sourceKey","typeInfo","memberName","srcTypeNameForDebug","_isDirectlyDeserializableNativeType","_makeTypeErrorMessage","_throwTypeMismatchError","Array","every","elem","isNaN","map","_stringToArrayBuffer","_stringToDataView","convertAsArray","convertAsSet","convertAsMap","elementTypeInfo","slice","element","resultSet","keyTypeInfo","valueTypeInfo","resultMap","targetType","expectedSourceType","actualSourceType","actualType","knownTypeMaps","result","knowTypes","knownTypeMeta","name_1","convertNativeObject","str","buf","bufView","strLen","charCodeAt","serializer_Serializer","Serializer","_typeHintEmitter","sourceTypeMetadata","setTypeHintEmitter","typeEmitterCallback","selfType","convertAsArrayBuffer","convertAsDataView","isArrayTypeInfo","elementTypes","isSetTypeInfo","isMapTypeInfo","convertAsTypedArray","expectedName","actualName","sourceMeta_1","serializer","__assign","expectedElementType","expectedTypeName","actualTypeName","typeInfoForElements","resultArray","resultElement","push","expectedKeyType","resultKeyValuePairObj","from","buffer","charCode","fromCharCode","join","dataView","jsonObject","optionsOrTarget","options","decorator","target","knownType","onDeserialized","initializer","knownTypeMethodName","filter","jsonMember","propCtor","isSpecialPropertyType","emitDefaultValue","toString","reflectPropCtor","jsonArrayMember","dimensions","undefined","elementCtor","fill","createArrayElementType","jsonSetMember","jsonMapMember","valueConstructor","typedjson_TypedJSON","TypedJSON","rootConstructor","settings","globalKnownTypes","indent","rootMetadata","nameResolver","errorHandler","config","_globalConfig","rootType","parseAsArray","parseAsSet","parseAsMap","valueType","toPlainJson","toPlainArray","toPlainSet","stringifyAsSet","toPlainMap","keyCtor","valueCtor","stringifyAsMap","stringify","stringifyAsArray","setGlobalConfig","typedjson_assign","replacer","typeResolver","typeHintEmitter","ktc","knownTypeCtor","_mapKnownTypes","elementConstructorArray","constructors"],"mappings":"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","file":"typedjson.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"typedjson\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"typedjson\"] = factory();\n\telse\n\t\troot[\"typedjson\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","declare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport const METADATA_FIELD_KEY = \"__typedJsonJsonObjectMetadataInformation__\";\n\nexport function getDefaultValue<T>(type: { new (): T }): T|undefined\n{\n    switch (type as any)\n    {\n        case Number:\n            return 0 as any;\n\n        case String:\n            return \"\" as any;\n\n        case Boolean:\n            return false as any;\n\n        case Array:\n            return [] as any;\n\n        default:\n            return undefined;\n    }\n}\n\n/**\n * Determines whether the specified type is a type that can be passed on \"as-is\" into `JSON.stringify`.\n * Values of these types don't need special conversion.\n * @param ctor The constructor of the type (wrapper constructor for primitive types, e.g. `Number` for `number`).\n */\nexport function isDirectlySerializableNativeType(type: Function): boolean\n{\n    return !!(~[Date, Number, String, Boolean].indexOf(type as any));\n}\n\nexport function isTypeTypedArray(type: Function): boolean\n{\n    return !!(~[Float32Array, Float64Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array]\n        .indexOf(type as any));\n}\n\nexport function isPrimitiveValue(obj: any): boolean\n{\n    switch (typeof obj)\n    {\n        case \"string\":\n        case \"number\":\n        case \"boolean\":\n            return true;\n        default:\n            return (obj instanceof String || obj instanceof Number || obj instanceof Boolean);\n    }\n}\n\nexport function isObject(value: any): value is Object\n{\n    return typeof value === \"object\";\n}\n\nfunction shouldOmitParseString(jsonStr: string, expectedType: Function): boolean {\n    const expectsTypesSerializedAsStrings = expectedType === String\n        || expectedType === ArrayBuffer\n        || expectedType === DataView;\n\n    const hasQuotes = jsonStr.length >= 2 && jsonStr[0] === '\"' && jsonStr[jsonStr.length-1] === '\"';\n    const isInteger = /^\\d+$/.test(jsonStr.trim());\n\n    return (expectsTypesSerializedAsStrings && !hasQuotes) || ((!hasQuotes && !isInteger) && expectedType === Date);\n}\n\nexport function parseToJSObject(json: any, expectedType: Function): Object {\n    if (typeof json !== 'string' || shouldOmitParseString(json, expectedType))\n    {\n      return json;\n    }\n    return JSON.parse(json);\n}\n\n/**\n * Determines if 'A' is a sub-type of 'B' (or if 'A' equals 'B').\n * @param A The supposed derived type.\n * @param B The supposed base type.\n */\nexport function isSubtypeOf(A: Function, B: Function)\n{\n    return A === B || A.prototype instanceof B;\n}\n\nexport function logError(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.error === \"function\")\n    {\n        console.error.apply(console, [message].concat(optionalParams));\n    }\n    else if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log.apply(console, [\"ERROR: \" + message].concat(optionalParams));\n    }\n}\n\nexport function logMessage(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log.apply(console, [message].concat(optionalParams));\n    }\n}\n\nexport function logWarning(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.warn === \"function\")\n    {\n        console.warn.apply(console, [message].concat(optionalParams));\n    } else if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log.apply(console, [\"WARNING: \" + message].concat(optionalParams));\n    }\n}\n\n/**\n * Checks if the value is considered defined (not undefined and not null).\n * @param value\n */\nexport function isValueDefined<T>(value: T): value is Exclude<T, undefined | null>\n{\n    return !(typeof value === \"undefined\" || value === null);\n}\n\nexport function isInstanceOf<T>(value: any, constructor: Function): boolean\n{\n    if (typeof value === \"number\")\n    {\n        return (constructor === Number);\n    }\n    else if (typeof value === \"string\")\n    {\n        return (constructor === String);\n    }\n    else if (typeof value === \"boolean\")\n    {\n        return (constructor === Boolean);\n    }\n    else if (isObject(value))\n    {\n        return (value instanceof constructor);\n    }\n\n    return false;\n}\n\nexport const isReflectMetadataSupported =\n    (typeof Reflect === \"object\" && typeof Reflect.getMetadata === \"function\");\n\n/**\n * Gets the name of a function.\n * @param fn The function whose name to get.\n */\nexport function nameof(fn: Function & { name?: string })\n{\n    if (typeof fn.name === \"string\")\n    {\n        return fn.name;\n    }\n    else\n    {\n        return \"undefined\";\n    }\n}\n","import { nameof, logError, METADATA_FIELD_KEY, isDirectlySerializableNativeType, isTypeTypedArray } from \"./helpers\";\nimport { IndexedObject } from \"./types\";\n\nexport interface JsonMemberMetadata\n{\n    /** If set, a default value will be emitted for uninitialized members. */\n    emitDefaultValue?: boolean;\n\n    /** Member name as it appears in the serialized JSON. */\n    name: string;\n\n    /** Property or field key of the json member. */\n    key: string;\n\n    /** Constuctor (type) reference of the member. */\n    ctor?: Function;\n\n    /** If set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** If the json member is an array, map or set, sets member options of elements/values. Subsequent values define the types of nested arrays. */\n    elementType?: Function[];\n\n    /** If the json member is a map, sets member options of array keys. */\n    keyType?: Function;\n\n    /** Custom deserializer to use. */\n    deserializer?: (json: any) => any;\n\n    /** Custom serializer to use. */\n    serializer?: (value: any) => any;\n}\n\nexport class JsonObjectMetadata\n{\n    //#region Static\n    /**\n     * Gets the name of a class as it appears in a serialized JSON string.\n     * @param ctor The constructor of a class (with or without jsonObject).\n     */\n    public static getJsonObjectName(ctor: Function): string\n    {\n        const metadata = JsonObjectMetadata.getFromConstructor(ctor);\n        return metadata ? nameof(metadata.classType) : nameof(ctor);\n    }\n\n    /**\n     * Gets jsonObject metadata information from a class.\n     * @param ctor The constructor class.\n     */\n    public static getFromConstructor(ctor: Function): JsonObjectMetadata|undefined\n    {\n        const prototype = ctor.prototype;\n        if (!prototype)\n        {\n            return;\n        }\n\n        let metadata: JsonObjectMetadata|undefined;\n        if (prototype.hasOwnProperty(METADATA_FIELD_KEY))\n        {\n            // The class prototype contains own jsonObject metadata\n            metadata = prototype[METADATA_FIELD_KEY];\n        }\n\n        // Ignore implicitly added jsonObject (through jsonMember)\n        if (metadata && metadata.isExplicitlyMarked)\n        {\n            return metadata;\n        }\n\n        // In the end maybe it is something which we can handle directly\n        if (JsonObjectMetadata.doesHandleWithoutAnnotation(ctor))\n        {\n            const primitiveMeta = new JsonObjectMetadata(ctor);\n            primitiveMeta.isExplicitlyMarked = true;\n            // we do not store the metadata here to not modify builtin prototype\n            return primitiveMeta;\n        }\n    }\n\n    /**\n     * Gets the known type name of a jsonObject class for type hint.\n     * @param constructor The constructor class.\n     */\n    public static getKnownTypeNameFromType(constructor: Function): string\n    {\n        const metadata = JsonObjectMetadata.getFromConstructor(constructor);\n        return metadata ? nameof(metadata.classType) : nameof(constructor);\n    }\n\n    private static doesHandleWithoutAnnotation(ctor: Function): boolean\n    {\n        return isDirectlySerializableNativeType(ctor) || isTypeTypedArray(ctor)\n            || ctor === DataView || ctor === ArrayBuffer;\n    }\n    //#endregion\n\n    constructor(\n        classType: Function,\n    ) {\n        this.classType = classType;\n    }\n\n    public dataMembers: Map<string, JsonMemberMetadata> = new Map<string, JsonMemberMetadata>();\n\n    public knownTypes: Set<Function> = new Set<Function>();\n\n    public knownTypeMethodName?: string;\n\n    /** Gets or sets the constructor function for the jsonObject. */\n    public classType: Function;\n\n    /**\n     * Indicates whether this class was explicitly annotated with @jsonObject\n     * or implicitly by @jsonMember\n     */\n    public isExplicitlyMarked: boolean = false;\n\n    /**\n     * Indicates whether this type is handled without annotation. This is usually\n     * used for the builtin types (except for Maps, Sets, and normal Arrays).\n     */\n    public isHandledWithoutAnnotation: boolean = false;\n\n    /** Name used to encode polymorphic type */\n    public name?: string;\n\n    public onDeserializedMethodName?: string;\n\n    public initializerCallback?: (sourceObject: Object, rawSourceObject: Object) => Object;\n}\n\nexport function injectMetadataInformation(constructor: IndexedObject, propKey: string | symbol, metadata: JsonMemberMetadata)\n{\n    const decoratorName = `@jsonMember on ${nameof(constructor.constructor)}.${String(propKey)}`; // For error messages.\n    let objectMetadata: JsonObjectMetadata;\n\n    // When a property decorator is applied to a static member, 'constructor' is a constructor function.\n    // See: https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Decorators.md#property-decorators\n    // ... and static members are not supported here, so abort.\n    if (typeof constructor === \"function\")\n    {\n        logError(`${decoratorName}: cannot use a static property.`);\n        return;\n    }\n\n    // Methods cannot be serialized.\n    // @ts-ignore symbol indexing is not supported by ts\n    if (typeof constructor[propKey] === \"function\")\n    {\n        logError(`${decoratorName}: cannot use a method property.`);\n        return;\n    }\n\n    if (!metadata || (!metadata.ctor && !metadata.deserializer))\n    {\n        logError(`${decoratorName}: JsonMemberMetadata has unknown ctor.`);\n        return;\n    }\n\n    // Add jsonObject metadata to 'constructor' if not yet exists ('constructor' is the prototype).\n    // NOTE: this will not fire up custom serialization, as 'constructor' must be explicitly marked with '@jsonObject' as well.\n    if (!constructor.hasOwnProperty(METADATA_FIELD_KEY))\n    {\n        // No *own* metadata, create new.\n        objectMetadata = new JsonObjectMetadata(constructor.constructor);\n\n        // Inherit @JsonMembers from parent @jsonObject (if any).\n        const parentMetadata: JsonObjectMetadata = constructor[METADATA_FIELD_KEY];\n        if (parentMetadata) // && !constructor.hasOwnProperty(Helpers.METADATA_FIELD_KEY)\n        {\n            parentMetadata.dataMembers.forEach((_metadata, _propKey) => objectMetadata.dataMembers.set(_propKey, _metadata));\n        }\n\n        // ('constructor' is the prototype of the involved class, metadata information is added to this class prototype).\n        Object.defineProperty(constructor, METADATA_FIELD_KEY, {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: objectMetadata\n        });\n    }\n    else\n    {\n        // JsonObjectMetadata already exists on 'constructor'.\n        objectMetadata = constructor[METADATA_FIELD_KEY];\n    }\n\n    if (!metadata.deserializer)\n    {\n        // @ts-ignore above is a check (!deser && !ctor)\n        objectMetadata.knownTypes.add(metadata.ctor);\n    }\n\n    if (metadata.keyType)\n        objectMetadata.knownTypes.add(metadata.keyType);\n\n    if (metadata.elementType)\n        metadata.elementType.forEach(elemCtor => objectMetadata.knownTypes.add(elemCtor));\n\n    objectMetadata.dataMembers.set(metadata.name, metadata);\n}\n","import { nameof, logError, isSubtypeOf, isValueDefined } from \"./helpers\";\nimport { IndexedObject } from \"./types\";\nimport { JsonObjectMetadata } from \"./metadata\";\n\nexport interface IScopeTypeInfo\n{\n    selfConstructor: Function;\n    elementConstructor?: Function[];\n    keyConstructor?: Function;\n    knownTypes: Map<string, Function>;\n}\n\n/**\n * Utility class, converts a simple/untyped javascript object-tree to a typed object-tree.\n * It is used after parsing a JSON-string.\n */\nexport class Deserializer<T>\n{\n    private _typeResolver: (sourceObject: Object, knownTypes: Map<string, Function>) => Function|undefined;\n    private _nameResolver?: (ctor: Function) => string;\n    private _errorHandler: (error: Error) => void;\n\n    constructor()\n    {\n        this._typeResolver = (sourceObject: any, knownTypes: Map<string, Function>) =>\n        {\n            if (sourceObject.__type) return knownTypes.get(sourceObject.__type);\n        };\n\n        this._errorHandler = (error) => logError(error);\n    }\n\n    public setNameResolver(nameResolverCallback: (ctor: Function) => string)\n    {\n        this._nameResolver = nameResolverCallback;\n    }\n\n    public setTypeResolver(typeResolverCallback: (sourceObject: Object, knownTypes: Map<string, Function>) => Function)\n    {\n        if (typeof typeResolverCallback !== \"function\") throw new TypeError(\"'typeResolverCallback' is not a function.\");\n\n        this._typeResolver = typeResolverCallback;\n    }\n\n    public setErrorHandler(errorHandlerCallback: (error: Error) => void)\n    {\n        if (typeof errorHandlerCallback !== \"function\")\n        {\n            throw new TypeError(\"'errorHandlerCallback' is not a function.\");\n        }\n\n        this._errorHandler = errorHandlerCallback;\n    }\n\n    public convertAsObject(\n        sourceObject: IndexedObject,\n        sourceObjectTypeInfo: IScopeTypeInfo,\n        objectName = \"object\",\n    ) {\n        if (typeof sourceObject !== \"object\" || sourceObject === null)\n        {\n            this._errorHandler(new TypeError(`Cannot deserialize ${objectName}: 'sourceObject' must be a defined object.`));\n            return undefined;\n        }\n\n        let expectedSelfType = sourceObjectTypeInfo.selfConstructor;\n        let sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(expectedSelfType);\n        let knownTypeConstructors = sourceObjectTypeInfo.knownTypes;\n\n        if (sourceObjectMetadata)\n        {\n            // Merge known types received from \"above\" with known types defined on the current type.\n            knownTypeConstructors = this._mergeKnownTypes(\n                knownTypeConstructors,\n                this._createKnownTypesMap(sourceObjectMetadata.knownTypes),\n            );\n        }\n\n        // Check if a type-hint is available from the source object.\n        let typeFromTypeHint = this._typeResolver(sourceObject, knownTypeConstructors);\n\n        if (typeFromTypeHint)\n        {\n            // Check if type hint is a valid subtype of the expected source type.\n            if (isSubtypeOf(typeFromTypeHint, expectedSelfType))\n            {\n                // Hell yes.\n                expectedSelfType = typeFromTypeHint;\n                sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(typeFromTypeHint);\n\n                if (sourceObjectMetadata)\n                {\n                    // Also merge new known types from subtype.\n                    knownTypeConstructors = this._mergeKnownTypes(\n                        knownTypeConstructors,\n                        this._createKnownTypesMap(sourceObjectMetadata.knownTypes),\n                    );\n                }\n            }\n        }\n\n        if (sourceObjectMetadata && sourceObjectMetadata.isExplicitlyMarked)\n        {\n            const sourceMetadata = sourceObjectMetadata;\n            // Strong-typed deserialization available, get to it.\n            // First deserialize properties into a temporary object.\n            const sourceObjectWithDeserializedProperties = {} as IndexedObject;\n\n            // Deserialize by expected properties.\n            sourceMetadata.dataMembers.forEach((memberMetadata, propKey) =>\n            {\n                const memberValue = sourceObject[propKey];\n                const memberNameForDebug = `${nameof(sourceMetadata.classType)}.${propKey}`;\n\n                let revivedValue;\n                if (memberMetadata.deserializer) {\n                    revivedValue = memberMetadata.deserializer(memberValue);\n                } else if (memberMetadata.ctor) {\n                    revivedValue = this.convertSingleValue(\n                        memberValue,\n                        {\n                            selfConstructor: memberMetadata.ctor,\n                            elementConstructor: memberMetadata.elementType,\n                            keyConstructor: memberMetadata.keyType,\n                            knownTypes: knownTypeConstructors\n                        },\n                        memberNameForDebug,\n                    );\n                } else {\n                    throw new TypeError(\n                        `Cannot deserialize ${memberNameForDebug} thers is`\n                        + ` no constructor nor deserlization function to use.`,\n                    );\n                }\n\n                if (isValueDefined(revivedValue))\n                {\n                    sourceObjectWithDeserializedProperties[memberMetadata.key] = revivedValue;\n                }\n                else if (memberMetadata.isRequired)\n                {\n                    this._errorHandler(new TypeError(`Missing required member '${memberNameForDebug}'.`));\n                }\n            });\n\n            // Next, instantiate target object.\n            let targetObject: IndexedObject;\n\n            if (typeof sourceObjectMetadata.initializerCallback === \"function\")\n            {\n                try\n                {\n                    targetObject = sourceObjectMetadata.initializerCallback(\n                        sourceObjectWithDeserializedProperties,\n                        sourceObject,\n                    );\n\n                    // Check the validity of user-defined initializer callback.\n                    if (!targetObject)\n                    {\n                        throw new TypeError(\n                            `Cannot deserialize ${objectName}:`\n                            + ` 'initializer' function returned undefined/null`\n                            + `, but '${nameof(sourceObjectMetadata.classType)}' was expected.`,\n                        );\n                    }\n                    else if (!(targetObject instanceof sourceObjectMetadata.classType))\n                    {\n                        throw new TypeError(\n                            `Cannot deserialize ${objectName}:`\n                            + `'initializer' returned '${nameof(targetObject.constructor)}'`\n                            + `, but '${nameof(sourceObjectMetadata.classType)}' was expected,`\n                            + `and '${nameof(targetObject.constructor)}' is not a subtype of`\n                            + ` '${nameof(sourceObjectMetadata.classType)}'`,\n                        );\n                    }\n                }\n                catch (e)\n                {\n                    this._errorHandler(e);\n                    return undefined;\n                }\n            }\n            else\n            {\n                targetObject = this._instantiateType(expectedSelfType);\n            }\n\n            // Finally, assign deserialized properties to target object.\n            Object.assign(targetObject, sourceObjectWithDeserializedProperties);\n\n            // Call onDeserialized method (if any).\n            if (sourceObjectMetadata.onDeserializedMethodName)\n            {\n                if (typeof (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName] === \"function\")\n                {\n                    (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName]();\n                }\n                else\n                {\n                    this._errorHandler(new TypeError(\n                        `onDeserialized callback '${nameof(sourceObjectMetadata.classType)}.${sourceObjectMetadata.onDeserializedMethodName}' is not a method.`\n                    ));\n                }\n            }\n\n            return targetObject;\n        }\n        else\n        {\n            // Untyped deserialization into Object instance.\n            let targetObject = {} as IndexedObject;\n\n            Object.keys(sourceObject).forEach(sourceKey =>\n            {\n                targetObject[sourceKey] = this.convertSingleValue(sourceObject[sourceKey], {\n                    selfConstructor: sourceObject[sourceKey].constructor,\n                    knownTypes: sourceObjectTypeInfo.knownTypes,\n                    elementConstructor: sourceObjectTypeInfo.elementConstructor,\n                    keyConstructor: sourceObjectTypeInfo.keyConstructor\n                }, sourceKey);\n            });\n\n            return targetObject;\n        }\n    }\n\n    public convertSingleValue(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\")\n    {\n        let expectedSelfType = typeInfo.selfConstructor;\n        let srcTypeNameForDebug = sourceObject ? nameof(sourceObject.constructor) : \"undefined\";\n\n        if (!isValueDefined(sourceObject))\n        {\n            return sourceObject;\n        }\n        else if (this._isDirectlyDeserializableNativeType(expectedSelfType))\n        {\n            if (sourceObject.constructor === expectedSelfType)\n            {\n                return sourceObject;\n            }\n            else\n            {\n                throw new TypeError(this._makeTypeErrorMessage(nameof(expectedSelfType), sourceObject.constructor, memberName));\n            }\n        }\n        else if (expectedSelfType === Date)\n        {\n            // Support for Date with ISO 8601 format, or with numeric timestamp (milliseconds elapsed since the Epoch).\n            // ISO 8601 spec.: https://www.w3.org/TR/NOTE-datetime\n\n            if (typeof sourceObject === \"string\" || (typeof sourceObject === \"number\" && sourceObject > 0))\n                return new Date(sourceObject as any);\n            else\n                this._throwTypeMismatchError(\"Date\", \"an ISO-8601 string\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Float32Array)\n        {\n            // Deserialize Float32Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Float32Array(sourceObject);\n            else\n                this._throwTypeMismatchError(\"Float32Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Float64Array)\n        {\n            // Deserialize Float64Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Float64Array(sourceObject);\n            else\n                this._throwTypeMismatchError(\"Float64Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint8Array)\n        {\n            // Deserialize Uint8Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint8Array(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint8Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint8ClampedArray)\n        {\n            // Deserialize Uint8Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint8ClampedArray(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint8ClampedArray\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint16Array)\n        {\n            // Deserialize Uint16Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint16Array(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint16Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint32Array)\n        {\n            // Deserialize Uint32Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint32Array(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint32Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === ArrayBuffer)\n        {\n            if (typeof sourceObject === \"string\")\n                return this._stringToArrayBuffer(sourceObject);\n            else\n                this._throwTypeMismatchError(\"ArrayBuffer\", \"a string source\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === DataView)\n        {\n            if (typeof sourceObject === \"string\")\n                return this._stringToDataView(sourceObject);\n            else\n                this._throwTypeMismatchError(\"DataView\", \"a string source\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Array)\n        {\n            if (sourceObject instanceof Array)\n                return this.convertAsArray(sourceObject, typeInfo, memberName);\n            else\n                throw new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName));\n        }\n        else if (expectedSelfType === Set)\n        {\n            if (sourceObject instanceof Array)\n                return this.convertAsSet(sourceObject, typeInfo, memberName);\n            else\n                this._throwTypeMismatchError(\"Set\", \"Array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Map)\n        {\n            if (sourceObject instanceof Array)\n                return this.convertAsMap(sourceObject, typeInfo, memberName);\n            else\n                this._throwTypeMismatchError(\"Map\", \"a source array of key-value-pair objects\", srcTypeNameForDebug, memberName);\n        }\n        else if (sourceObject && typeof sourceObject === \"object\")\n        {\n            return this.convertAsObject(sourceObject, typeInfo, memberName);\n        }\n    }\n\n    public convertAsArray(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\"): any[]\n    {\n        if (!(sourceObject instanceof Array))\n        {\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n            return [];\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Array: missing constructor reference of Array elements.`));\n            return [];\n        }\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n\n        return sourceObject.map(element =>\n        {\n            // If an array element fails to deserialize, substitute with undefined. This is so that the original ordering is not interrupted by faulty\n            // entries, as an Array is ordered.\n            try\n            {\n                return this.convertSingleValue(element, elementTypeInfo);\n            }\n            catch (e)\n            {\n                this._errorHandler(e);\n\n                // Keep filling the array here with undefined to keep original ordering.\n                // Note: this is just aesthetics, not returning anything produces the same result.\n                return undefined;\n            }\n        });\n    }\n\n    public convertAsSet(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\")\n    {\n        if (!(sourceObject instanceof Array))\n        {\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n            return new Set<any>();\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Set: missing constructor reference of Set elements.`));\n            return new Set<any>();\n        }\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n        let resultSet = new Set<any>();\n\n        sourceObject.forEach((element, i) =>\n        {\n            try\n            {\n                resultSet.add(this.convertSingleValue(element, elementTypeInfo, memberName + `[${i}]`));\n            }\n            catch (e)\n            {\n                // Faulty entries are skipped, because a Set is not ordered, and skipping an entry does not affect others.\n                this._errorHandler(e);\n            }\n        });\n\n        return resultSet;\n    }\n\n    public convertAsMap(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\")\n    {\n        if (!(sourceObject instanceof Array))\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n\n        if (!typeInfo.keyConstructor)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Map: missing key constructor.`));\n            return new Map<any, any>();\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Map: missing value constructor.`));\n            return new Map<any, any>();\n        }\n\n        let keyTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.keyConstructor,\n            knownTypes: typeInfo.knownTypes\n        };\n\n        let valueTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n\n        let resultMap = new Map<any, any>();\n\n        sourceObject.forEach((element: any) =>\n        {\n            try\n            {\n                let key = this.convertSingleValue(element.key, keyTypeInfo);\n\n                // Undefined/null keys not supported, skip if so.\n                if (isValueDefined(key))\n                {\n                    resultMap.set(key, this.convertSingleValue(\n                        element.value, valueTypeInfo, `${memberName}[${key}]`,\n                    ));\n                }\n            }\n            catch (e)\n            {\n                // Faulty entries are skipped, because a Map is not ordered,\n                // and skipping an entry does not affect others.\n                this._errorHandler(e);\n            }\n        });\n\n        return resultMap;\n    }\n\n    private _throwTypeMismatchError(\n        targetType: string,\n        expectedSourceType: string,\n        actualSourceType: string,\n        memberName: string = \"object\",\n    ) {\n        throw new TypeError(\n            `Could not deserialize ${memberName} as ${targetType}:`\n            + ` expected ${expectedSourceType}, got ${actualSourceType}.`,\n        );\n    }\n\n    private _makeTypeErrorMessage(expectedType: Function | string, actualType: Function | string, memberName = \"object\")\n    {\n        let expectedTypeName = (typeof expectedType === \"function\") ? nameof(expectedType) : expectedType;\n        let actualTypeName = (typeof actualType === \"function\") ? nameof(actualType) : actualType;\n\n        return `Could not deserialize ${memberName}: expected '${expectedTypeName}', got '${actualTypeName}'.`;\n    }\n\n    private _instantiateType(ctor: any)\n    {\n        return new ctor();\n    }\n\n    private _mergeKnownTypes(...knownTypeMaps: Array<Map<string, Function>>)\n    {\n        let result = new Map<string, Function>();\n\n        knownTypeMaps.forEach(knownTypes =>\n        {\n            knownTypes.forEach((ctor, name) =>\n            {\n                if (this._nameResolver)\n                {\n                    result.set(this._nameResolver(ctor), ctor);\n                }\n                else\n                {\n                    result.set(name, ctor);\n                }\n            });\n        });\n\n        return result;\n    }\n\n    private _createKnownTypesMap(knowTypes: Set<Function>)\n    {\n        const map = new Map<string, Function>();\n\n        knowTypes.forEach(ctor =>\n        {\n            if (this._nameResolver)\n            {\n                map.set(this._nameResolver(ctor), ctor);\n            }\n            else\n            {\n                const knownTypeMeta = JsonObjectMetadata.getFromConstructor(ctor);\n                const name = knownTypeMeta && knownTypeMeta.isExplicitlyMarked && knownTypeMeta.name\n                    ? knownTypeMeta.name\n                    : ctor.name;\n                map.set(name, ctor);\n            }\n        });\n\n        return map;\n    }\n\n    private _isDirectlyDeserializableNativeType(ctor: any)\n    {\n        return ~([Number, String, Boolean].indexOf(ctor));\n    }\n\n    public convertNativeObject(sourceObject: any)\n    {\n        return sourceObject;\n    }\n\n    private _stringToArrayBuffer(str: string)\n    {\n        let buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        let bufView = new Uint16Array(buf);\n\n        for (let i = 0, strLen = str.length; i < strLen; i++)\n        {\n            bufView[i] = str.charCodeAt(i);\n        }\n\n        return buf;\n    }\n\n    private _stringToDataView(str: string)\n    {\n        return new DataView(this._stringToArrayBuffer(str));\n    }\n}\n","import { nameof, logError, isValueDefined, isInstanceOf, isTypeTypedArray, isDirectlySerializableNativeType } from \"./helpers\";\nimport { IndexedObject } from \"./types\";\nimport { JsonObjectMetadata } from \"./metadata\";\n\nexport interface IScopeTypeInfo\n{\n    selfType: Function;\n    elementTypes?: Function[];\n    keyType?: Function;\n}\n\nexport interface IScopeArrayTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Array<any>;\n    elementTypes: Function[];\n}\n\nfunction isArrayTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeArrayTypeInfo {\n    return typeInfo.selfType === Array;\n}\n\nexport interface IScopeSetTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Set<any>;\n    elementTypes: [Function];\n}\n\nfunction isSetTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeSetTypeInfo {\n    return typeInfo.selfType === Set;\n}\n\nexport interface IScopeMapTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Map<any, any>;\n    elementTypes: [Function];\n    keyType: Function;\n}\n\nfunction isMapTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeMapTypeInfo {\n    return typeInfo.selfType === Map;\n}\n\n/**\n * Utility class, converts a typed object tree (i.e. a tree of class instances, arrays of class instances, and so on) to an untyped javascript object (also\n * called \"simple javascript object\"), and emits any necessary type hints in the process (for polymorphism).\n *\n * The converted object tree is what will be given to `JSON.stringify` to convert to string as the last step, the serialization is basically like:\n *\n * (1) typed object-tree -> (2) simple JS object-tree -> (3) JSON-string\n */\nexport class Serializer\n{\n    private _typeHintEmitter: (targetObject: IndexedObject, sourceObject: IndexedObject, expectedSourceType: Function, sourceTypeMetadata?: JsonObjectMetadata) => void;\n    private _errorHandler: (error: Error) => void;\n\n    constructor()\n    {\n        this._typeHintEmitter = (targetObject, sourceObject, expectedSourceType, sourceTypeMetadata?: JsonObjectMetadata) =>\n        {\n            // By default, we put a \"__type\" property on the output object if the actual object is not the same as the expected one, so that deserialization\n            // will know what to deserialize into (given the required known-types are defined, and the object is a valid subtype of the expected type).\n            if (sourceObject.constructor !== expectedSourceType)\n            {\n                const name = sourceTypeMetadata && sourceTypeMetadata.name\n                    ? sourceTypeMetadata.name\n                    : nameof(sourceObject.constructor);\n                // TODO: Perhaps this can work correctly without string-literal access?\n                // tslint:disable-next-line:no-string-literal\n                targetObject[\"__type\"] = name;\n            }\n        };\n\n        this._errorHandler = (error) => logError(error);\n    }\n\n    public setTypeHintEmitter(typeEmitterCallback: (targetObject: Object, sourceObject: Object, expectedSourceType: Function) => void)\n    {\n        if (typeof typeEmitterCallback !== \"function\")\n        {\n            throw new TypeError(\"'typeEmitterCallback' is not a function.\");\n        }\n\n        this._typeHintEmitter = typeEmitterCallback;\n    }\n\n    public setErrorHandler(errorHandlerCallback: (error: Error) => void)\n    {\n        if (typeof errorHandlerCallback !== \"function\")\n        {\n            throw new TypeError(\"'errorHandlerCallback' is not a function.\");\n        }\n\n        this._errorHandler = errorHandlerCallback;\n    }\n\n    /**\n     * Convert a value of any supported serializable type.\n     * The value type will be detected, and the correct serialization method will be called.\n     */\n    public convertSingleValue(sourceObject: any, typeInfo: IScopeTypeInfo, memberName: string = \"object\"): any\n    {\n        if (!isValueDefined(sourceObject)) return;\n\n        if (!isInstanceOf(sourceObject, typeInfo.selfType))\n        {\n            let expectedName = nameof(typeInfo.selfType);\n            let actualName = nameof(sourceObject.constructor);\n\n            this._errorHandler(new TypeError(`Could not serialize '${memberName}': expected '${expectedName}', got '${actualName}'.`));\n            return;\n        }\n\n        if (isDirectlySerializableNativeType(typeInfo.selfType))\n        {\n            return sourceObject;\n        }\n        else if (typeInfo.selfType === ArrayBuffer)\n        {\n            return this.convertAsArrayBuffer(sourceObject);\n        }\n        else if (typeInfo.selfType === DataView)\n        {\n            return this.convertAsDataView(sourceObject);\n        }\n        else if (isArrayTypeInfo(typeInfo))\n        {\n            return this.convertAsArray(sourceObject, typeInfo.elementTypes, memberName);\n        }\n        else if (isSetTypeInfo(typeInfo))\n        {\n            return this.convertAsSet(sourceObject, typeInfo.elementTypes[0], memberName);\n        }\n        else if (isMapTypeInfo(typeInfo))\n        {\n            return this.convertAsMap(sourceObject, typeInfo.keyType, typeInfo.elementTypes[0], memberName);\n        }\n        else if (isTypeTypedArray(typeInfo.selfType))\n        {\n            return this.convertAsTypedArray(sourceObject);\n        }\n        else if (typeof sourceObject === \"object\")\n        {\n            return this.convertAsObject(sourceObject, typeInfo, memberName);\n        }\n    }\n\n    /**\n     * Performs the conversion of a typed object (usually a class instance) to a simple javascript object for serialization.\n     */\n    public convertAsObject(sourceObject: IndexedObject, typeInfo: IScopeTypeInfo, memberName?: string)\n    {\n        let sourceTypeMetadata: JsonObjectMetadata|undefined;\n        let targetObject: IndexedObject;\n\n        if (sourceObject.constructor !== typeInfo.selfType && sourceObject instanceof typeInfo.selfType)\n        {\n            // The source object is not of the expected type, but it is a valid subtype.\n            // This is OK, and we'll proceed to gather object metadata from the subtype instead.\n            sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(sourceObject.constructor);\n        }\n        else\n        {\n            sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(typeInfo.selfType);\n        }\n\n        if (sourceTypeMetadata)\n        {\n            const sourceMeta = sourceTypeMetadata;\n            // Strong-typed serialization available.\n            // We'll serialize by members that have been marked with @jsonMember (including array/set/map members), and perform recursive conversion on\n            // each of them. The converted objects are put on the 'targetObject', which is what will be put into 'JSON.stringify' finally.\n            targetObject = {};\n\n            sourceTypeMetadata.dataMembers.forEach((memberMetadata) =>\n            {\n                if (memberMetadata.serializer) {\n                    targetObject[memberMetadata.name] =\n                        memberMetadata.serializer(sourceObject[memberMetadata.key]);\n                } else if (memberMetadata.ctor) {\n                    targetObject[memberMetadata.name] = this.convertSingleValue(\n                        sourceObject[memberMetadata.key],\n                        {\n                            selfType: memberMetadata.ctor,\n                            elementTypes: memberMetadata.elementType,\n                            keyType: memberMetadata.keyType,\n                        },\n                        `${nameof(sourceMeta.classType)}.${memberMetadata.key}`,\n                    );\n                } else {\n                    throw new TypeError(\n                        `Could not serialize ${memberMetadata.name}, there is`\n                        + ` no constructor nor serialization function to use.`,\n                    );\n                }\n            });\n        }\n        else\n        {\n            // Untyped serialization, \"as-is\", we'll just pass the object on.\n            // We'll clone the source object, because type hints are added to the object itself, and we don't want to modify to the original object.\n            targetObject = { ...sourceObject };\n        }\n\n        // Add type-hint.\n        this._typeHintEmitter(targetObject, sourceObject, typeInfo.selfType, sourceTypeMetadata);\n\n        return targetObject;\n    }\n\n    /**\n     * Performs the conversion of an array of typed objects (or primitive values) to an array of simple javascript objects (or primitive values) for\n     * serialization.\n     * @param expectedElementType The expected type of elements. If the array is supposed to be multi-dimensional, subsequent elements define lower dimensions.\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     */\n    public convertAsArray(sourceObject: any[], expectedElementType: Function[], memberName = \"object\"): any[]\n    {\n        if (expectedElementType.length === 0 || !expectedElementType[0])\n           throw new TypeError(`Could not serialize ${memberName} as Array: missing element type definition.`);\n\n        // Check the type of each element, individually.\n        // If at least one array element type is incorrect, we return undefined, which results in no value emitted during serialization.\n        // This is so that invalid element types don't unexpectedly alter the ordering of other, valid elements, and that no unexpected undefined values are in\n        // the emitted array.\n        sourceObject.forEach((element, i) =>\n        {\n            if (!isInstanceOf(element, expectedElementType[0]))\n            {\n                const expectedTypeName = nameof(expectedElementType[0]);\n                const actualTypeName = nameof(element.constructor);\n                throw new TypeError(`Could not serialize ${memberName}[${i}]: expected '${expectedTypeName}', got '${actualTypeName}'.`);\n            }\n        });\n\n        const typeInfoForElements: IScopeTypeInfo = {\n            selfType: expectedElementType[0],\n            elementTypes: expectedElementType.length > 1 ? expectedElementType.slice(1) : [], // For multidimensional arrays.\n        };\n\n        if (memberName)\n        {\n            // Just for debugging purposes.\n            memberName += \"[]\";\n        }\n\n        return sourceObject.map(element => this.convertSingleValue(element, typeInfoForElements, memberName));\n    }\n\n    /**\n     * Performs the conversion of a set of typed objects (or primitive values) into an array of simple javascript objects.\n     *\n     * @param sourceObject\n     * @param expectedElementType The constructor of the expected Set elements (e.g. `Number` for `Set<number>`, or `MyClass` for `Set<MyClass>`).\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     * @returns\n     */\n    public convertAsSet(sourceObject: Set<any>, expectedElementType: Function, memberName = \"object\"): any[]\n    {\n        if (!expectedElementType)\n            throw new TypeError(`Could not serialize ${memberName} as Set: missing element type definition.`);\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfType: expectedElementType,\n        };\n\n        // For debugging and error tracking.\n        if (memberName) memberName += \"[]\";\n\n        let resultArray: any[] = [];\n\n        // Convert each element of the set, and put it into an output array.\n        // The output array is the one serialized, as JSON.stringify does not support Set serialization. (TODO: clarification needed)\n        sourceObject.forEach(element =>\n        {\n            let resultElement = this.convertSingleValue(element, elementTypeInfo, memberName);\n\n            // Add to output if the source element was undefined, OR the converted element is defined. This will add intentionally undefined values to output,\n            // but not values that became undefined DURING serializing (usually because of a type-error).\n            if (!isValueDefined(element) || isValueDefined(resultElement))\n            {\n                resultArray.push(resultElement);\n            }\n        });\n\n        return resultArray;\n    }\n\n    /**\n     * Performs the conversion of a map of typed objects (or primitive values) into an array of simple javascript objects with `key` and `value` properties.\n     *\n     * @param sourceObject\n     * @param expectedKeyType The constructor of the expected Map keys (e.g. `Number` for `Map<number, any>`, or `MyClass` for `Map<MyClass, any>`).\n     * @param expectedElementType The constructor of the expected Map values (e.g. `Number` for `Map<any, number>`, or `MyClass` for `Map<any, MyClass>`).\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     */\n    public convertAsMap(sourceObject: Map<any, any>, expectedKeyType: Function, expectedElementType: Function, memberName = \"object\"): Array<{ key: any, value: any }>\n    {\n        if (!expectedElementType)\n            throw new TypeError(`Could not serialize ${memberName} as Map: missing value type definition.`);\n\n        if (!expectedKeyType)\n            throw new TypeError(`Could not serialize ${memberName} as Map: missing key type definition.`);\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfType: expectedElementType,\n            elementTypes: [expectedElementType]\n        };\n\n        let keyTypeInfo: IScopeTypeInfo = {\n            selfType: expectedKeyType\n        };\n\n        if (memberName) memberName += \"[]\";\n\n        let resultArray: Array<{ key: any, value: any }> = [];\n\n        // Convert each *entry* in the map to a simple javascript object with key and value properties.\n        sourceObject.forEach((value, key) =>\n        {\n            let resultKeyValuePairObj = {\n                key: this.convertSingleValue(key, keyTypeInfo, memberName),\n                value: this.convertSingleValue(value, elementTypeInfo, memberName)\n            };\n\n            // We are not going to emit entries with undefined keys OR undefined values.\n            if (isValueDefined(resultKeyValuePairObj.key) && isValueDefined(resultKeyValuePairObj.value))\n            {\n                resultArray.push(resultKeyValuePairObj);\n            }\n        });\n\n        return resultArray;\n    }\n\n    /**\n     * Performs the conversion of a typed javascript array to a simple untyped javascript array.\n     * This is needed because typed arrays are otherwise serialized as objects, so we'll end up with something like \"{ 0: 0, 1: 1, ... }\".\n     *\n     * @param sourceObject\n     * @returns\n     */\n    public convertAsTypedArray(sourceObject: ArrayBufferView)\n    {\n        return Array.from(sourceObject as any);\n    }\n\n    /**\n     * Performs the conversion of a raw ArrayBuffer to a string.\n     */\n    public convertAsArrayBuffer(buffer: ArrayBuffer)\n    {\n        // ArrayBuffer -> 16-bit character codes -> character array -> joined string.\n        return Array.from(new Uint16Array(buffer)).map(charCode => String.fromCharCode(charCode)).join(\"\");\n    }\n\n    /**\n     * Performs the conversion of DataView, converting its internal ArrayBuffer to a string and returning that string.\n     */\n    public convertAsDataView(dataView: DataView)\n    {\n        return this.convertAsArrayBuffer(dataView.buffer);\n    }\n}\n","import { Constructor, ParameterlessConstructor } from \"./types\";\nimport { METADATA_FIELD_KEY } from \"./helpers\";\nimport { JsonObjectMetadata } from \"./metadata\";\n\nexport interface IJsonObjectOptionsBase\n{\n    /**\n     * An array of known types to recognize when encountering type-hints,\n     * or the name of a static method used for determining known types.\n     */\n    knownTypes?: Function[] | string;\n\n    /**\n     * The name of a static or instance method to call when deserialization\n     * of the object is completed.\n     */\n    onDeserialized?: string;\n\n    /**\n     * The name used to differentiate between different polymorphic types.\n     */\n    name?: string;\n}\n\nexport interface IJsonObjectOptionsWithInitializer<T> extends IJsonObjectOptionsBase\n{\n    /**\n     * The name of a static method to call before deserializing and initializing the object, accepting two arguments: (1) sourceObject, an 'Object' instance\n     * with all properties already deserialized, and (2) rawSourceObject, a raw 'Object' instance representation of the current object in the serialized JSON\n     * (i.e. without deserialized properties).\n     */\n    initializer: (sourceObject: T, rawSourceObject: T) => T;\n}\n\nexport interface IJsonObjectOptions<T> extends IJsonObjectOptionsBase\n{\n    /**\n     * The name of a static method to call before deserializing and initializing the object, accepting two arguments: (1) sourceObject, an 'Object' instance\n     * with all properties already deserialized, and (2) rawSourceObject, a raw 'Object' instance representation of the current object in the serialized JSON\n     * (i.e. without deserialized properties).\n     */\n    initializer?: (sourceObject: T, rawSourceObject: T) => T;\n}\n\n/**\n * Marks that a class with a parameterized constructor is serializable using TypedJSON, with additional settings. The 'initializer' setting must be specified.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptionsWithInitializer<T>): (target: Constructor<T>) => void;\n\n/**\n * Marks that a class is serializable using TypedJSON, with additional settings.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptions<T>): (target: ParameterlessConstructor<T>) => void;\n\n/**\n * Marks that a class with a parameterless constructor is serializable using TypedJSON.\n */\nexport function jsonObject<T>(target: ParameterlessConstructor<T>): void;\n\nexport function jsonObject<T extends Object>(optionsOrTarget?: IJsonObjectOptions<T> | Constructor<T>\n): ((target: Constructor<T>) => void) | void {\n    let options: IJsonObjectOptions<T>;\n\n    if (typeof optionsOrTarget === \"function\")\n    {\n        // jsonObject is being used as a decorator, directly.\n        options = {};\n    }\n    else\n    {\n        // jsonObject is being used as a decorator factory.\n        options = optionsOrTarget || {};\n    }\n\n    function decorator(\n        target: Function\n    ): void {\n        let objectMetadata: JsonObjectMetadata;\n\n        // Create or obtain JsonObjectMetadata object.\n        if (!target.prototype.hasOwnProperty(METADATA_FIELD_KEY))\n        {\n            // Target has no JsonObjectMetadata associated with it yet, create it now.\n            objectMetadata = new JsonObjectMetadata(target);\n\n            // Inherit json members and known types from parent @jsonObject (if any).\n            const parentMetadata: JsonObjectMetadata = target.prototype[METADATA_FIELD_KEY];\n            if (parentMetadata)\n            {\n                parentMetadata.dataMembers\n                    .forEach((memberMetadata, propKey) =>\n                        objectMetadata.dataMembers.set(propKey, memberMetadata));\n                parentMetadata.knownTypes\n                    .forEach((knownType) => objectMetadata.knownTypes.add(knownType));\n            }\n\n            Object.defineProperty(target.prototype, METADATA_FIELD_KEY, {\n                enumerable: false,\n                configurable: false,\n                writable: false,\n                value: objectMetadata\n            });\n        }\n        else\n        {\n            // Target already has JsonObjectMetadata associated with it.\n            objectMetadata = target.prototype[METADATA_FIELD_KEY];\n            objectMetadata.classType = target;\n        }\n\n        // Fill JsonObjectMetadata.\n        objectMetadata.isExplicitlyMarked = true;\n        objectMetadata.onDeserializedMethodName = options.onDeserialized;\n        // T extend Object so it is fine\n        objectMetadata.initializerCallback = options.initializer as any;\n        if (options.name)\n        {\n            objectMetadata.name = options.name;\n        }\n\n        // Obtain known-types.\n        if (typeof options.knownTypes === \"string\")\n        {\n            objectMetadata.knownTypeMethodName = options.knownTypes;\n        }\n        else if (options.knownTypes instanceof Array)\n        {\n            options.knownTypes\n                .filter(knownType => !!knownType)\n                .forEach(knownType => objectMetadata.knownTypes.add(knownType));\n        }\n    }\n\n    if (typeof optionsOrTarget === \"function\")\n    {\n        // jsonObject is being used as a decorator, directly.\n        decorator(optionsOrTarget);\n    }\n    else\n    {\n        // jsonObject is being used as a decorator factory.\n        return decorator;\n    }\n}\n","import {\n    nameof, logError, isReflectMetadataSupported, isValueDefined, logWarning, isSubtypeOf\n} from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMemberOptions\n{\n    /**\n     * Sets the constructor of the property.\n     * Optional with ReflectDecorators.\n     */\n    constructor?: Function;\n\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted if the property is uninitialized/undefined. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name. */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property is part of the object when serializing, with additional options.\n * Omitting the 'constructor' option requires ReflectDecorators and that the property type is always explicitly declared.\n * @param options Additional options.\n */\nexport function jsonMember<TFunction extends Function>(options: IJsonMemberOptions): PropertyDecorator;\n\n/**\n * Specifies that a property is part of the object when serializing.\n * This call signature requires ReflectDecorators and that the property type is always explicitly declared.\n */\nexport function jsonMember(target: Object, propertyKey: string | symbol): void;\n\nexport function jsonMember<TFunction extends Function>(optionsOrTarget?: IJsonMemberOptions | Object, propKey?: string | symbol): PropertyDecorator | void\n{\n    if (optionsOrTarget instanceof Object && (typeof propKey === \"string\" || typeof propKey === \"symbol\"))\n    {\n        const target = optionsOrTarget;\n        // For error messages.\n        const decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(propKey)}`;\n\n        // jsonMember used directly, no additional information directly available besides target and propKey.\n        // Obtain property constructor through ReflectDecorators.\n        if (isReflectMetadataSupported)\n        {\n            const reflectPropCtor = Reflect.getMetadata(\"design:type\", target, propKey) as Function;\n\n            if (!reflectPropCtor)\n            {\n                logError(`${decoratorName}: could not resolve detected property constructor at runtime.`);\n                return;\n            }\n\n            if (isSpecialPropertyType(decoratorName, reflectPropCtor))\n            {\n                return;\n            }\n\n            injectMetadataInformation(target, propKey, {\n                ctor: reflectPropCtor,\n                key: propKey.toString(),\n                name: propKey.toString(),\n            });\n        }\n        else\n        {\n            logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n            return;\n        }\n    }\n    else\n    {\n        // jsonMember used as a decorator factory.\n        return (target: Object, _propKey: string | symbol) =>\n        {\n            let options: IJsonMemberOptions = optionsOrTarget || {};\n            let propCtor: Function|undefined;\n            let decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(_propKey)}`; // For error messages.\n\n            if (options.hasOwnProperty(\"constructor\"))\n            {\n                if (!isValueDefined(options.constructor))\n                {\n                    logError(`${decoratorName}: cannot resolve specified property constructor at runtime.`);\n                    return;\n                }\n\n                // Property constructor has been specified. Use ReflectDecorators (if available) to check whether that constructor is correct. Warn if not.\n                if (isReflectMetadataSupported && !isSubtypeOf(options.constructor, Reflect.getMetadata(\"design:type\", target, _propKey)))\n                {\n                    logWarning(`${decoratorName}: detected property type does not match 'constructor' option.`);\n                }\n\n                propCtor = options.constructor;\n            }\n            else\n            {\n                // Use ReflectDecorators to obtain property constructor.\n                if (isReflectMetadataSupported)\n                {\n                    propCtor = Reflect.getMetadata(\"design:type\", target, _propKey) as Function;\n\n                    if (!propCtor)\n                    {\n                        logError(`${decoratorName}: cannot resolve detected property constructor at runtime.`);\n                        return;\n                    }\n                }\n                else if (!options.deserializer)\n                {\n                    logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n                    return;\n                }\n            }\n\n            if (isSpecialPropertyType(decoratorName, propCtor))\n            {\n                return;\n            }\n\n            injectMetadataInformation(target, _propKey, {\n                ctor: propCtor,\n                emitDefaultValue: options.emitDefaultValue || false,\n                isRequired: options.isRequired || false,\n                key: _propKey.toString(),\n                name: options.name || _propKey.toString(),\n                deserializer: options.deserializer,\n                serializer: options.serializer,\n            });\n        };\n    }\n}\n\nfunction isSpecialPropertyType(decoratorName: string, propCtor?: Function)\n{\n    if (propCtor === Array)\n    {\n        logError(`${decoratorName}: property is an Array. Use the jsonArrayMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (propCtor === Set)\n    {\n        logError(`${decoratorName}: property is a Set. Use the jsonSetMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (propCtor === Map)\n    {\n        logError(`${decoratorName}: property is a Map. Use the jsonMapMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    return false;\n}\n","import { nameof, logError, isReflectMetadataSupported } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonArrayMemberOptions\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, an empty array is emitted if the property is undefined/uninitialized. */\n    emitDefaultValue?: boolean;\n\n    /** Sets array dimensions (e.g. 1 for 'number[]' or 2 for 'number[][]'). Defaults to 1. */\n    dimensions?: number;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property, of type array, is part of an object when serializing.\n * @param elementConstructor Constructor of array elements (e.g. 'Number' for 'number[]', or 'Date' for 'Date[]').\n * @param options Additional options.\n */\nexport function jsonArrayMember(elementConstructor: Function, options: IJsonArrayMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        let decoratorName = `@jsonArrayMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof elementConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of array elements at runtime.`);\n            return;\n        }\n\n        const dimensions = options.dimensions === undefined ? 1 : options.dimensions;\n        if (!isNaN(dimensions) && dimensions < 1)\n        {\n            logError(`${decoratorName}: 'dimensions' option must be at least 1.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonArrayMember' has been used on an array.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Array)\n        {\n            logError(`${decoratorName}: property is not an Array.`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Array,\n            elementType: createArrayElementType(elementConstructor, dimensions),\n            emitDefaultValue: options.emitDefaultValue || false,\n            isRequired: options.isRequired || false,\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n\nfunction createArrayElementType(elementCtor: Function, dimensions: number) {\n    const elementTypes = new Array(dimensions).fill(Array, 0, -1);\n    elementTypes[dimensions-1] = elementCtor;\n    return elementTypes;\n}\n","import { nameof } from \"./helpers\";\nimport { IJsonMemberOptions } from \"./json-member\";\nimport { JsonMemberMetadata, JsonObjectMetadata, injectMetadataInformation } from \"./metadata\";\nimport * as Helpers from \"./helpers\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonSetMemberOptions\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Set<T>.\n * @param elementConstructor Constructor of set elements (e.g. 'Number' for Set<number> or 'Date' for Set<Date>).\n * @param options Additional options.\n */\nexport function jsonSetMember(elementConstructor: Function, options: IJsonSetMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        var decoratorName = `@jsonSetMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof elementConstructor !== \"function\")\n        {\n            Helpers.logError(`${decoratorName}: could not resolve constructor of set elements at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonSetMember' has been used on a set. Warn if not.\n        if (Helpers.isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Set)\n        {\n            Helpers.logError(`${decoratorName}: property is not a Set.`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Set,\n            elementType: [elementConstructor],\n            emitDefaultValue: options.emitDefaultValue || false,\n            isRequired: options.isRequired || false,\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import { nameof, logError, isReflectMetadataSupported } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMapMemberOptions\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Map<K, V>.\n * @param keyConstructor Constructor of map keys (e.g. 'Number' for 'Map<number, Date>').\n * @param valueConstructor Constructor of map values (e.g. 'Date' for 'Map<number, Date>').\n * @param options Additional options.\n */\nexport function jsonMapMember(keyConstructor: Function, valueConstructor: Function, options: IJsonMapMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        let decoratorName = `@jsonMapMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof keyConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of map keys at runtime.`);\n            return;\n        }\n\n        if (typeof valueConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of map values at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonMapMember' has been used on a map. Warn if not.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Map)\n        {\n            logError(`${decoratorName}: property is not a Map.`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Map,\n            elementType: [valueConstructor],\n            keyType: keyConstructor,\n            emitDefaultValue: options.emitDefaultValue || false,\n            isRequired: options.isRequired || false,\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import { nameof, logError, logWarning, parseToJSObject } from './typedjson/helpers';\nimport { Constructor } from \"./typedjson/types\";\nimport { JsonObjectMetadata } from \"./typedjson/metadata\";\nimport { Deserializer } from \"./typedjson/deserializer\";\nimport { Serializer } from \"./typedjson/serializer\";\n\nexport type JsonTypes = Object|boolean|string|number|null|undefined;\n\nexport interface ITypedJSONSettings\n{\n    /**\n     * Sets the handler callback to invoke on errors during serializing and deserializing.\n     * Re-throwing errors in this function will halt serialization/deserialization.\n     * The default behavior is to log errors to the console.\n     */\n    errorHandler?: (e: Error) => void;\n\n    /**\n     * Sets a callback that determines the constructor of the correct sub-type of polymorphic\n     * objects while deserializing.\n     * The default behavior is to read the type-name from the '__type' property of 'sourceObject',\n     * and look it up in 'knownTypes'.\n     * The constructor of the sub-type should be returned.\n     */\n    typeResolver?: (sourceObject: Object, knownTypes: Map<string, Function>) => Function;\n\n    nameResolver?: (ctor: Function) => string;\n\n    /**\n     * Sets a callback that writes type-hints to serialized objects.\n     * The default behavior is to write the type-name to the '__type' property, if a derived type\n     * is present in place of a base type.\n     */\n    typeHintEmitter?:\n        (targetObject: Object, sourceObject: Object, expectedSourceType: Function) => void;\n\n    /**\n     * Sets the amount of indentation to use in produced JSON strings.\n     * Default value is 0, or no indentation.\n     */\n    indent?: number;\n\n    replacer?: (key: string, value: any) => any;\n\n    knownTypes?: Array<Constructor<any>>;\n}\n\nexport class TypedJSON<T>\n{\n    //#region Static\n    public static parse<T>(\n        object: any, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): T|undefined {\n        return new TypedJSON(rootType, settings).parse(object);\n    }\n\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: 1\n    ): T[];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 2\n    ): T[][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 3\n    ): T[][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 4\n    ): T[][][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 5\n    ): T[][][][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: number\n    ): any[] {\n        return new TypedJSON(elementType, settings).parseAsArray(object, dimensions as any);\n    }\n\n    public static parseAsSet<T>(\n        object: any, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): Set<T> {\n        return new TypedJSON(elementType, settings).parseAsSet(object);\n    }\n\n    public static parseAsMap<K, V>(\n        object: any,\n        keyType: Constructor<K>,\n        valueType: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): Map<K, V> {\n        return new TypedJSON(valueType, settings).parseAsMap(object, keyType);\n    }\n\n    public static toPlainJson<T>(\n        object: T, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): JsonTypes {\n        return new TypedJSON(rootType, settings).toPlainJson(object);\n    }\n\n    public static toPlainArray<T>(\n        object: T[], elementType: Constructor<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): Object[];\n    public static toPlainArray<T>(\n        object: T[][], elementType: Constructor<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): Object[][];\n    public static toPlainArray<T>(\n        object: T[][][], elementType: Constructor<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): Object[][][];\n    public static toPlainArray<T>(\n        object: T[][][][], elementType: Constructor<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): Object[][][][];\n    public static toPlainArray<T>(\n        object: T[][][][][], elementType: Constructor<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): Object[][][][][];\n    public static toPlainArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): any[];\n    public static toPlainArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions?: any, settings?: ITypedJSONSettings,\n    ): any[] {\n        return new TypedJSON(elementType, settings).toPlainArray(object, dimensions);\n    }\n\n    public static toPlainSet<T>(\n        object: Set<T>, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsSet(object);\n    }\n\n    public static toPlainMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Constructor<K>,\n        valueCtor: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(valueCtor, settings).stringifyAsMap(object, keyCtor);\n    }\n\n    public static stringify<T>(\n        object: T, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(rootType, settings).stringify(object);\n    }\n\n    public static stringifyAsArray<T>(\n        object: T[], elementType: Constructor<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][], elementType: Constructor<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][], elementType: Constructor<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][][], elementType: Constructor<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][][][], elementType: Constructor<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions?: any, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsArray(object, dimensions);\n    }\n\n    public static stringifyAsSet<T>(\n        object: Set<T>, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsSet(object);\n    }\n\n    public static stringifyAsMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Constructor<K>,\n        valueCtor: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(valueCtor, settings).stringifyAsMap(object, keyCtor);\n    }\n\n    private static _globalConfig: ITypedJSONSettings;\n\n    public static setGlobalConfig(config: ITypedJSONSettings)\n    {\n        if (this._globalConfig)\n        {\n            Object.assign(this._globalConfig, config);\n        }\n        else\n        {\n            this._globalConfig = config;\n        }\n    }\n\n    //#endregion\n\n    private serializer: Serializer = new Serializer();\n    private deserializer: Deserializer<T> = new Deserializer<T>();\n    private globalKnownTypes: Array<Constructor<any>> = [];\n    private indent: number = 0;\n    private rootConstructor: Constructor<T>;\n    private errorHandler: (e: Error) => void;\n    private nameResolver: (ctor: Function) => string;\n    private replacer?: (key: string, value: any) => any;\n\n    /**\n     * Creates a new TypedJSON instance to serialize (stringify) and deserialize (parse) object\n     *     instances of the specified root class type.\n     * @param rootType The constructor of the root class type.\n     * @param settings Additional configuration settings.\n     */\n    constructor(rootConstructor: Constructor<T>, settings?: ITypedJSONSettings)\n    {\n        let rootMetadata = JsonObjectMetadata.getFromConstructor(rootConstructor);\n\n        if (!rootMetadata || (!rootMetadata.isExplicitlyMarked && !rootMetadata.isHandledWithoutAnnotation))\n        {\n            throw new TypeError(\"The TypedJSON root data type must have the @jsonObject decorator used.\");\n        }\n\n        this.nameResolver = (ctor) => nameof(ctor);\n        this.rootConstructor = rootConstructor;\n        this.errorHandler = (error) => logError(error);\n\n        if (settings)\n        {\n            this.config(settings);\n        }\n        else if (TypedJSON._globalConfig)\n        {\n            this.config({});\n        }\n    }\n\n    /**\n     * Configures TypedJSON through a settings object.\n     * @param settings The configuration settings object.\n     */\n    public config(settings: ITypedJSONSettings)\n    {\n        if (TypedJSON._globalConfig)\n        {\n            settings = {\n                ...TypedJSON._globalConfig,\n                ...settings\n            };\n\n            if (settings.knownTypes && TypedJSON._globalConfig.knownTypes)\n            {\n                // Merge known-types (also de-duplicate them, so Array -> Set -> Array).\n                settings.knownTypes = Array.from(new Set(\n                    settings.knownTypes.concat(TypedJSON._globalConfig.knownTypes),\n                ));\n            }\n        }\n\n        if (settings.errorHandler)\n        {\n            this.errorHandler = settings.errorHandler;\n            this.deserializer.setErrorHandler(settings.errorHandler);\n            this.serializer.setErrorHandler(settings.errorHandler);\n        }\n\n        if (settings.replacer) this.replacer = settings.replacer;\n        if (settings.typeResolver) this.deserializer.setTypeResolver(settings.typeResolver);\n        if (settings.typeHintEmitter) this.serializer.setTypeHintEmitter(settings.typeHintEmitter);\n        if (settings.indent) this.indent = settings.indent;\n\n        if (settings.nameResolver)\n        {\n            this.nameResolver = settings.nameResolver;\n            this.deserializer.setNameResolver(settings.nameResolver);\n            // this.serializer.set\n        }\n\n        if (settings.knownTypes)\n        {\n            // Type-check knownTypes elements to recognize errors in advance.\n            settings.knownTypes.forEach((knownType, i) =>\n            {\n                // tslint:disable-next-line:no-null-keyword\n                if (typeof knownType === \"undefined\" || knownType === null)\n                {\n                    logWarning(\n                        `TypedJSON.config: 'knownTypes' contains an undefined/null value (element ${i}).`);\n                }\n            });\n\n            this.globalKnownTypes = settings.knownTypes;\n        }\n    }\n\n    /**\n     * Converts a JSON string to the root class type.\n     * @param object The JSON to parse and convert.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns Deserialized T or undefined if there were errors.\n     */\n    public parse(object: any): T|undefined\n    {\n        const json = parseToJSObject(object, this.rootConstructor);\n\n        let rootMetadata = JsonObjectMetadata.getFromConstructor(this.rootConstructor);\n        let result: T|undefined;\n        let knownTypes = new Map<string, Function>();\n\n        this.globalKnownTypes.filter(ktc => ktc).forEach(knownTypeCtor =>\n        {\n            knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n        });\n\n        if (rootMetadata)\n        {\n            rootMetadata.knownTypes.forEach(knownTypeCtor =>\n            {\n                knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n            });\n        }\n\n        try\n        {\n            result = this.deserializer.convertSingleValue(json, {\n                selfConstructor: this.rootConstructor,\n                knownTypes: knownTypes,\n            }) as T;\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n\n        return result;\n    }\n\n    public parseAsArray(object: any, dimensions?: 1): T[];\n    public parseAsArray(object: any, dimensions: 2): T[][];\n    public parseAsArray(object: any, dimensions: 3): T[][][];\n    public parseAsArray(object: any, dimensions: 4): T[][][][];\n    public parseAsArray(object: any, dimensions: 5): T[][][][][];\n    public parseAsArray(object: any, dimensions: number): any[];\n    public parseAsArray(object: any, dimensions: number = 1): any[]\n    {\n        const json = parseToJSObject(object, Array);\n        if (json instanceof Array)\n        {\n            return this.deserializer.convertAsArray(json, {\n                selfConstructor: Array,\n                elementConstructor: new Array(dimensions - 1)\n                    .fill(Array)\n                    .concat(this.rootConstructor),\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes),\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define an Array`\n                + `, but got ${typeof json}.`));\n        }\n\n        return [];\n    }\n\n    public parseAsSet(object: any): Set<T>\n    {\n        const json = parseToJSObject(object, Set);\n        // A Set<T> is serialized as T[].\n        if (json instanceof Array)\n        {\n            return this.deserializer.convertAsSet(json, {\n                selfConstructor: Array,\n                elementConstructor: [this.rootConstructor],\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes)\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define a Set (using an Array)`\n                + `, but got ${typeof json}.`,\n            ));\n        }\n\n        return new Set<T>();\n    }\n\n    public parseAsMap<K>(object: any, keyConstructor: Constructor<K>): Map<K, T>\n    {\n        const json = parseToJSObject(object, Map);\n        // A Set<T> is serialized as T[].\n        if (json instanceof Array)\n        {\n            return this.deserializer.convertAsMap(json, {\n                selfConstructor: Array,\n                elementConstructor: [this.rootConstructor],\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes),\n                keyConstructor: keyConstructor\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define a Set (using an Array)`\n                + `, but got ${typeof json}.`,\n            ));\n        }\n\n        return new Map<K, T>();\n    }\n\n    /**\n     * Converts an instance of the specified class type to a plain JSON object.\n     * @param object The instance to convert to a JSON string.\n     * @returns Serialized object or undefined if an error has occured.\n     */\n    public toPlainJson(object: T): JsonTypes\n    {\n        try\n        {\n            return this.serializer.convertSingleValue(object, {\n                selfType: this.rootConstructor\n            });\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainArray(object: T[], dimensions?: 1): Object[];\n    public toPlainArray(object: T[][], dimensions: 2): Object[][];\n    public toPlainArray(object: T[][][], dimensions: 3): Object[][][];\n    public toPlainArray(object: T[][][][], dimensions: 4): Object[][][][];\n    public toPlainArray(object: T[][][][][], dimensions: 5): Object[][][][][];\n    public toPlainArray(object: any[], dimensions: 1|2|3|4|5 = 1): Object[]|undefined\n    {\n        try\n        {\n            const elementConstructorArray =\n                new Array(dimensions - 1).fill(Array).concat(this.rootConstructor);\n            return this.serializer.convertAsArray(object, elementConstructorArray);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainSet(object: Set<T>): Object[]|undefined\n    {\n        try\n        {\n            return this.serializer.convertAsSet(object, this.rootConstructor);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainMap<K>(object: Map<K, T>, keyConstructor: Constructor<K>): { key: any, value: any }[]|undefined\n    {\n        try\n        {\n            return this.serializer.convertAsMap(object, keyConstructor, this.rootConstructor);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    /**\n     * Converts an instance of the specified class type to a JSON string.\n     * @param object The instance to convert to a JSON string.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns String with the serialized object or an empty string if an error has occured, but\n     *     the errorHandler did not throw.\n     */\n    public stringify(object: T): string\n    {\n        const result = this.toPlainJson(object);\n        if (result === undefined) {\n            return '';\n        }\n        return JSON.stringify(result, this.replacer, this.indent);\n    }\n\n    public stringifyAsArray(object: T[], dimensions?: 1): string;\n    public stringifyAsArray(object: T[][], dimensions: 2): string;\n    public stringifyAsArray(object: T[][][], dimensions: 3): string;\n    public stringifyAsArray(object: T[][][][], dimensions: 4): string;\n    public stringifyAsArray(object: T[][][][][], dimensions: 5): string;\n    public stringifyAsArray(object: any[], dimensions: any): string\n    {\n        return JSON.stringify(this.toPlainArray(object, dimensions), this.replacer, this.indent);\n    }\n\n    public stringifyAsSet(object: Set<T>): string\n    {\n        return JSON.stringify(this.toPlainSet(object), this.replacer, this.indent);\n    }\n\n    public stringifyAsMap<K>(object: Map<K, T>, keyConstructor: Constructor<K>): string\n    {\n        return JSON.stringify(this.toPlainMap(object, keyConstructor), this.replacer, this.indent);\n    }\n\n    private _mapKnownTypes(constructors: Array<Constructor<any>>)\n    {\n        let map = new Map<string, Constructor<any>>();\n\n        constructors.filter(ctor => ctor).forEach(ctor => map.set(this.nameResolver(ctor), ctor));\n\n        return map;\n    }\n}\n\nexport { jsonObject } from \"./typedjson/json-object\";\nexport { jsonMember } from \"./typedjson/json-member\";\nexport { jsonArrayMember } from \"./typedjson/json-array-member\";\nexport { jsonSetMember } from \"./typedjson/json-set-member\";\nexport { jsonMapMember } from \"./typedjson/json-map-member\";\n"],"sourceRoot":""}