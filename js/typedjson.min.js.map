{"version":3,"sources":["webpack://typedjson/webpack/universalModuleDefinition","webpack://typedjson/webpack/bootstrap","webpack://typedjson/./src/typedjson/helpers.ts","webpack://typedjson/./src/typedjson/metadata.ts","webpack://typedjson/./src/typedjson/deserializer.ts","webpack://typedjson/./src/typedjson/serializer.ts","webpack://typedjson/./src/typedjson/json-object.ts","webpack://typedjson/./src/typedjson/json-member.ts","webpack://typedjson/./src/typedjson/json-array-member.ts","webpack://typedjson/./src/typedjson/json-set-member.ts","webpack://typedjson/./src/typedjson/json-map-member.ts","webpack://typedjson/./src/typedjson.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","METADATA_FIELD_KEY","isDirectlySerializableNativeType","type","Date","Number","String","Boolean","indexOf","isTypeTypedArray","Float32Array","Float64Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","isSubtypeOf","A","B","logError","message","optionalParams","_i","arguments","length","console","error","apply","concat","log","logWarning","warn","isValueDefined","isInstanceOf","constructor","isObject","isReflectMetadataSupported","Reflect","getMetadata","nameof","fn","metadata_JsonObjectMetadata","JsonObjectMetadata","classType","dataMembers","Map","knownTypes","Set","isExplicitlyMarked","isHandledWithoutAnnotation","getJsonObjectName","ctor","metadata","getFromConstructor","doesHandleWithoutAnnotation","primitiveMeta","getKnownTypeNameFromType","DataView","ArrayBuffer","injectMetadataInformation","propKey","objectMetadata","decoratorName","deserializer","parentMetadata","forEach","_metadata","_propKey","set","writable","add","keyType","elementType","elemCtor","deserializer_Deserializer","Deserializer","_typeResolver","sourceObject","__type","_errorHandler","setNameResolver","nameResolverCallback","_nameResolver","setTypeResolver","typeResolverCallback","TypeError","setErrorHandler","errorHandlerCallback","convertAsObject","sourceObjectTypeInfo","objectName","_this","expectedSelfType","selfConstructor","sourceObjectMetadata","knownTypeConstructors","_mergeKnownTypes","_createKnownTypesMap","typeFromTypeHint","sourceMetadata_1","sourceObjectWithDeserializedProperties_1","memberMetadata","revivedValue","memberValue","memberNameForDebug","convertSingleValue","elementConstructor","keyConstructor","key","isRequired","targetObject","initializerCallback","e","_instantiateType","assign","onDeserializedMethodName","targetObject_1","keys","sourceKey","typeInfo","memberName","srcTypeNameForDebug","_isDirectlyDeserializableNativeType","_makeTypeErrorMessage","_throwTypeMismatchError","Array","every","elem","isNaN","map","_stringToArrayBuffer","_stringToDataView","convertAsArray","convertAsSet","convertAsMap","elementTypeInfo","slice","element","resultSet","keyTypeInfo","valueTypeInfo","resultMap","targetType","expectedSourceType","actualSourceType","expectedType","actualType","knownTypeMaps","result","knowTypes","knownTypeMeta","name_1","convertNativeObject","str","buf","bufView","strLen","charCodeAt","serializer_Serializer","Serializer","_typeHintEmitter","sourceTypeMetadata","setTypeHintEmitter","typeEmitterCallback","selfType","convertAsArrayBuffer","convertAsDataView","isArrayTypeInfo","elementTypes","isSetTypeInfo","isMapTypeInfo","convertAsTypedArray","expectedName","actualName","sourceMeta_1","serializer","__assign","expectedElementType","expectedTypeName","actualTypeName","typeInfoForElements","resultArray","resultElement","push","expectedKeyType","resultKeyValuePairObj","from","buffer","charCode","fromCharCode","join","dataView","jsonObject","optionsOrTarget","options","decorator","target","knownType","onDeserialized","initializer","knownTypeMethodName","filter","jsonMember","propCtor","isSpecialPropertyType","emitDefaultValue","toString","reflectPropCtor","jsonArrayMember","dimensions","undefined","elementCtor","fill","createArrayElementType","jsonSetMember","jsonMapMember","valueConstructor","typedjson_TypedJSON","TypedJSON","rootConstructor","settings","globalKnownTypes","indent","rootMetadata","nameResolver","errorHandler","config","_globalConfig","parse","rootType","parseAsArray","parseAsSet","parseAsMap","valueType","toPlainJson","toPlainArray","toPlainSet","stringifyAsSet","toPlainMap","keyCtor","valueCtor","stringifyAsMap","stringify","stringifyAsArray","setGlobalConfig","typedjson_assign","replacer","typeResolver","typeHintEmitter","json","JSON","ktc","knownTypeCtor","_mapKnownTypes","elementConstructorArray","constructors"],"mappings":"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","file":"typedjson.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"typedjson\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"typedjson\"] = factory();\n\telse\n\t\troot[\"typedjson\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","declare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport const METADATA_FIELD_KEY = \"__typedJsonJsonObjectMetadataInformation__\";\n\nexport function getDefaultValue<T>(type: { new (): T }): T|undefined\n{\n    switch (type as any)\n    {\n        case Number:\n            return 0 as any;\n\n        case String:\n            return \"\" as any;\n\n        case Boolean:\n            return false as any;\n\n        case Array:\n            return [] as any;\n\n        default:\n            return undefined;\n    }\n}\n\n/**\n * Determines whether the specified type is a type that can be passed on \"as-is\" into `JSON.stringify`.\n * Values of these types don't need special conversion.\n * @param ctor The constructor of the type (wrapper constructor for primitive types, e.g. `Number` for `number`).\n */\nexport function isDirectlySerializableNativeType(type: Function): boolean\n{\n    return !!(~[Date, Number, String, Boolean].indexOf(type as any));\n}\n\nexport function isTypeTypedArray(type: Function): boolean\n{\n    return !!(~[Float32Array, Float64Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array]\n        .indexOf(type as any));\n}\n\nexport function isPrimitiveValue(obj: any): boolean\n{\n    switch (typeof obj)\n    {\n        case \"string\":\n        case \"number\":\n        case \"boolean\":\n            return true;\n        default:\n            return (obj instanceof String || obj instanceof Number || obj instanceof Boolean);\n    }\n}\n\nexport function isObject(value: any): value is Object\n{\n    return typeof value === \"object\";\n}\n\n/**\n * Determines if 'A' is a sub-type of 'B' (or if 'A' equals 'B').\n * @param A The supposed derived type.\n * @param B The supposed base type.\n */\nexport function isSubtypeOf(A: Function, B: Function)\n{\n    return A === B || A.prototype instanceof B;\n}\n\nexport function logError(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.error === \"function\")\n    {\n        console.error.apply(console, [message].concat(optionalParams));\n    }\n    else if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log.apply(console, [\"ERROR: \" + message].concat(optionalParams));\n    }\n}\n\nexport function logMessage(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log.apply(console, [message].concat(optionalParams));\n    }\n}\n\nexport function logWarning(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.warn === \"function\")\n    {\n        console.warn.apply(console, [message].concat(optionalParams));\n    } else if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log.apply(console, [\"WARNING: \" + message].concat(optionalParams));\n    }\n}\n\n/**\n * Checks if the value is considered defined (not undefined and not null).\n * @param value\n */\nexport function isValueDefined<T>(value: T): value is Exclude<T, undefined | null>\n{\n    return !(typeof value === \"undefined\" || value === null);\n}\n\nexport function isInstanceOf<T>(value: any, constructor: Function): boolean\n{\n    if (typeof value === \"number\")\n    {\n        return (constructor === Number);\n    }\n    else if (typeof value === \"string\")\n    {\n        return (constructor === String);\n    }\n    else if (typeof value === \"boolean\")\n    {\n        return (constructor === Boolean);\n    }\n    else if (isObject(value))\n    {\n        return (value instanceof constructor);\n    }\n\n    return false;\n}\n\nexport const isReflectMetadataSupported =\n    (typeof Reflect === \"object\" && typeof Reflect.getMetadata === \"function\");\n\n/**\n * Gets the name of a function.\n * @param fn The function whose name to get.\n */\nexport function nameof(fn: Function & { name?: string })\n{\n    if (typeof fn.name === \"string\")\n    {\n        return fn.name;\n    }\n    else\n    {\n        return \"undefined\";\n    }\n}\n","import { nameof, logError, METADATA_FIELD_KEY, isDirectlySerializableNativeType, isTypeTypedArray } from \"./helpers\";\nimport { IndexedObject } from \"./types\";\n\nexport interface JsonMemberMetadata\n{\n    /** If set, a default value will be emitted for uninitialized members. */\n    emitDefaultValue?: boolean;\n\n    /** Member name as it appears in the serialized JSON. */\n    name: string;\n\n    /** Property or field key of the json member. */\n    key: string;\n\n    /** Constuctor (type) reference of the member. */\n    ctor?: Function;\n\n    /** If set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** If the json member is an array, map or set, sets member options of elements/values. Subsequent values define the types of nested arrays. */\n    elementType?: Function[];\n\n    /** If the json member is a map, sets member options of array keys. */\n    keyType?: Function;\n\n    /** Custom deserializer to use. */\n    deserializer?: (json: any) => any;\n\n    /** Custom serializer to use. */\n    serializer?: (value: any) => any;\n}\n\nexport class JsonObjectMetadata\n{\n    //#region Static\n    /**\n     * Gets the name of a class as it appears in a serialized JSON string.\n     * @param ctor The constructor of a class (with or without jsonObject).\n     */\n    public static getJsonObjectName(ctor: Function): string\n    {\n        const metadata = JsonObjectMetadata.getFromConstructor(ctor);\n        return metadata ? nameof(metadata.classType) : nameof(ctor);\n    }\n\n    /**\n     * Gets jsonObject metadata information from a class.\n     * @param ctor The constructor class.\n     */\n    public static getFromConstructor(ctor: Function): JsonObjectMetadata|undefined\n    {\n        const prototype = ctor.prototype;\n        if (!prototype)\n        {\n            return;\n        }\n\n        let metadata: JsonObjectMetadata|undefined;\n        if (prototype.hasOwnProperty(METADATA_FIELD_KEY))\n        {\n            // The class prototype contains own jsonObject metadata\n            metadata = prototype[METADATA_FIELD_KEY];\n        }\n\n        // Ignore implicitly added jsonObject (through jsonMember)\n        if (metadata && metadata.isExplicitlyMarked)\n        {\n            return metadata;\n        }\n\n        // In the end maybe it is something which we can handle directly\n        if (JsonObjectMetadata.doesHandleWithoutAnnotation(ctor))\n        {\n            const primitiveMeta = new JsonObjectMetadata(ctor);\n            primitiveMeta.isExplicitlyMarked = true;\n            // we do not store the metadata here to not modify builtin prototype\n            return primitiveMeta;\n        }\n    }\n\n    /**\n     * Gets the known type name of a jsonObject class for type hint.\n     * @param constructor The constructor class.\n     */\n    public static getKnownTypeNameFromType(constructor: Function): string\n    {\n        const metadata = JsonObjectMetadata.getFromConstructor(constructor);\n        return metadata ? nameof(metadata.classType) : nameof(constructor);\n    }\n\n    private static doesHandleWithoutAnnotation(ctor: Function): boolean\n    {\n        return isDirectlySerializableNativeType(ctor) || isTypeTypedArray(ctor)\n            || ctor === DataView || ctor === ArrayBuffer;\n    }\n    //#endregion\n\n    constructor(\n        classType: Function,\n    ) {\n        this.classType = classType;\n    }\n\n    public dataMembers: Map<string, JsonMemberMetadata> = new Map<string, JsonMemberMetadata>();\n\n    public knownTypes: Set<Function> = new Set<Function>();\n\n    public knownTypeMethodName?: string;\n\n    /** Gets or sets the constructor function for the jsonObject. */\n    public classType: Function;\n\n    /**\n     * Indicates whether this class was explicitly annotated with @jsonObject\n     * or implicitly by @jsonMember\n     */\n    public isExplicitlyMarked: boolean = false;\n\n    /**\n     * Indicates whether this type is handled without annotation. This is usually\n     * used for the builtin types (except for Maps, Sets, and normal Arrays).\n     */\n    public isHandledWithoutAnnotation: boolean = false;\n\n    /** Name used to encode polymorphic type */\n    public name?: string;\n\n    public onDeserializedMethodName?: string;\n\n    public initializerCallback?: (sourceObject: Object, rawSourceObject: Object) => Object;\n}\n\nexport function injectMetadataInformation(constructor: IndexedObject, propKey: string | symbol, metadata: JsonMemberMetadata)\n{\n    const decoratorName = `@jsonMember on ${nameof(constructor.constructor)}.${String(propKey)}`; // For error messages.\n    let objectMetadata: JsonObjectMetadata;\n\n    // When a property decorator is applied to a static member, 'constructor' is a constructor function.\n    // See: https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Decorators.md#property-decorators\n    // ... and static members are not supported here, so abort.\n    if (typeof constructor === \"function\")\n    {\n        logError(`${decoratorName}: cannot use a static property.`);\n        return;\n    }\n\n    // Methods cannot be serialized.\n    // @ts-ignore symbol indexing is not supported by ts\n    if (typeof constructor[propKey] === \"function\")\n    {\n        logError(`${decoratorName}: cannot use a method property.`);\n        return;\n    }\n\n    if (!metadata || (!metadata.ctor && !metadata.deserializer))\n    {\n        logError(`${decoratorName}: JsonMemberMetadata has unknown ctor.`);\n        return;\n    }\n\n    // Add jsonObject metadata to 'constructor' if not yet exists ('constructor' is the prototype).\n    // NOTE: this will not fire up custom serialization, as 'constructor' must be explicitly marked with '@jsonObject' as well.\n    if (!constructor.hasOwnProperty(METADATA_FIELD_KEY))\n    {\n        // No *own* metadata, create new.\n        objectMetadata = new JsonObjectMetadata(constructor.constructor);\n\n        // Inherit @JsonMembers from parent @jsonObject (if any).\n        const parentMetadata: JsonObjectMetadata = constructor[METADATA_FIELD_KEY];\n        if (parentMetadata) // && !constructor.hasOwnProperty(Helpers.METADATA_FIELD_KEY)\n        {\n            parentMetadata.dataMembers.forEach((_metadata, _propKey) => objectMetadata.dataMembers.set(_propKey, _metadata));\n        }\n\n        // ('constructor' is the prototype of the involved class, metadata information is added to this class prototype).\n        Object.defineProperty(constructor, METADATA_FIELD_KEY, {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: objectMetadata\n        });\n    }\n    else\n    {\n        // JsonObjectMetadata already exists on 'constructor'.\n        objectMetadata = constructor[METADATA_FIELD_KEY];\n    }\n\n    if (!metadata.deserializer)\n    {\n        // @ts-ignore above is a check (!deser && !ctor)\n        objectMetadata.knownTypes.add(metadata.ctor);\n    }\n\n    if (metadata.keyType)\n        objectMetadata.knownTypes.add(metadata.keyType);\n\n    if (metadata.elementType)\n        metadata.elementType.forEach(elemCtor => objectMetadata.knownTypes.add(elemCtor));\n\n    objectMetadata.dataMembers.set(metadata.name, metadata);\n}\n","import { nameof, logError, isSubtypeOf, isValueDefined } from \"./helpers\";\nimport { IndexedObject } from \"./types\";\nimport { JsonObjectMetadata } from \"./metadata\";\n\nexport interface IScopeTypeInfo\n{\n    selfConstructor: Function;\n    elementConstructor?: Function[];\n    keyConstructor?: Function;\n    knownTypes: Map<string, Function>;\n}\n\n/**\n * Utility class, converts a simple/untyped javascript object-tree to a typed object-tree.\n * It is used after parsing a JSON-string.\n */\nexport class Deserializer<T>\n{\n    private _typeResolver: (sourceObject: Object, knownTypes: Map<string, Function>) => Function|undefined;\n    private _nameResolver?: (ctor: Function) => string;\n    private _errorHandler: (error: Error) => void;\n\n    constructor()\n    {\n        this._typeResolver = (sourceObject: any, knownTypes: Map<string, Function>) =>\n        {\n            if (sourceObject.__type) return knownTypes.get(sourceObject.__type);\n        };\n\n        this._errorHandler = (error) => logError(error);\n    }\n\n    public setNameResolver(nameResolverCallback: (ctor: Function) => string)\n    {\n        this._nameResolver = nameResolverCallback;\n    }\n\n    public setTypeResolver(typeResolverCallback: (sourceObject: Object, knownTypes: Map<string, Function>) => Function)\n    {\n        if (typeof typeResolverCallback !== \"function\") throw new TypeError(\"'typeResolverCallback' is not a function.\");\n\n        this._typeResolver = typeResolverCallback;\n    }\n\n    public setErrorHandler(errorHandlerCallback: (error: Error) => void)\n    {\n        if (typeof errorHandlerCallback !== \"function\")\n        {\n            throw new TypeError(\"'errorHandlerCallback' is not a function.\");\n        }\n\n        this._errorHandler = errorHandlerCallback;\n    }\n\n    public convertAsObject(\n        sourceObject: IndexedObject,\n        sourceObjectTypeInfo: IScopeTypeInfo,\n        objectName = \"object\",\n    ) {\n        if (typeof sourceObject !== \"object\" || sourceObject === null)\n        {\n            this._errorHandler(new TypeError(`Cannot deserialize ${objectName}: 'sourceObject' must be a defined object.`));\n            return undefined;\n        }\n\n        let expectedSelfType = sourceObjectTypeInfo.selfConstructor;\n        let sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(expectedSelfType);\n        let knownTypeConstructors = sourceObjectTypeInfo.knownTypes;\n\n        if (sourceObjectMetadata)\n        {\n            // Merge known types received from \"above\" with known types defined on the current type.\n            knownTypeConstructors = this._mergeKnownTypes(\n                knownTypeConstructors,\n                this._createKnownTypesMap(sourceObjectMetadata.knownTypes),\n            );\n        }\n\n        // Check if a type-hint is available from the source object.\n        let typeFromTypeHint = this._typeResolver(sourceObject, knownTypeConstructors);\n\n        if (typeFromTypeHint)\n        {\n            // Check if type hint is a valid subtype of the expected source type.\n            if (isSubtypeOf(typeFromTypeHint, expectedSelfType))\n            {\n                // Hell yes.\n                expectedSelfType = typeFromTypeHint;\n                sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(typeFromTypeHint);\n\n                if (sourceObjectMetadata)\n                {\n                    // Also merge new known types from subtype.\n                    knownTypeConstructors = this._mergeKnownTypes(\n                        knownTypeConstructors,\n                        this._createKnownTypesMap(sourceObjectMetadata.knownTypes),\n                    );\n                }\n            }\n        }\n\n        if (sourceObjectMetadata && sourceObjectMetadata.isExplicitlyMarked)\n        {\n            const sourceMetadata = sourceObjectMetadata;\n            // Strong-typed deserialization available, get to it.\n            // First deserialize properties into a temporary object.\n            const sourceObjectWithDeserializedProperties = {} as IndexedObject;\n\n            // Deserialize by expected properties.\n            sourceMetadata.dataMembers.forEach((memberMetadata, propKey) =>\n            {\n                const memberValue = sourceObject[propKey];\n                const memberNameForDebug = `${nameof(sourceMetadata.classType)}.${propKey}`;\n\n                let revivedValue;\n                if (memberMetadata.deserializer) {\n                    revivedValue = memberMetadata.deserializer(memberValue);\n                } else if (memberMetadata.ctor) {\n                    revivedValue = this.convertSingleValue(\n                        memberValue,\n                        {\n                            selfConstructor: memberMetadata.ctor,\n                            elementConstructor: memberMetadata.elementType,\n                            keyConstructor: memberMetadata.keyType,\n                            knownTypes: knownTypeConstructors\n                        },\n                        memberNameForDebug,\n                    );\n                } else {\n                    throw new TypeError(\n                        `Cannot deserialize ${memberNameForDebug} thers is`\n                        + ` no constructor nor deserlization function to use.`,\n                    );\n                }\n\n                if (isValueDefined(revivedValue))\n                {\n                    sourceObjectWithDeserializedProperties[memberMetadata.key] = revivedValue;\n                }\n                else if (memberMetadata.isRequired)\n                {\n                    this._errorHandler(new TypeError(`Missing required member '${memberNameForDebug}'.`));\n                }\n            });\n\n            // Next, instantiate target object.\n            let targetObject: IndexedObject;\n\n            if (typeof sourceObjectMetadata.initializerCallback === \"function\")\n            {\n                try\n                {\n                    targetObject = sourceObjectMetadata.initializerCallback(\n                        sourceObjectWithDeserializedProperties,\n                        sourceObject,\n                    );\n\n                    // Check the validity of user-defined initializer callback.\n                    if (!targetObject)\n                    {\n                        throw new TypeError(\n                            `Cannot deserialize ${objectName}:`\n                            + ` 'initializer' function returned undefined/null`\n                            + `, but '${nameof(sourceObjectMetadata.classType)}' was expected.`,\n                        );\n                    }\n                    else if (!(targetObject instanceof sourceObjectMetadata.classType))\n                    {\n                        throw new TypeError(\n                            `Cannot deserialize ${objectName}:`\n                            + `'initializer' returned '${nameof(targetObject.constructor)}'`\n                            + `, but '${nameof(sourceObjectMetadata.classType)}' was expected,`\n                            + `and '${nameof(targetObject.constructor)}' is not a subtype of`\n                            + ` '${nameof(sourceObjectMetadata.classType)}'`,\n                        );\n                    }\n                }\n                catch (e)\n                {\n                    this._errorHandler(e);\n                    return undefined;\n                }\n            }\n            else\n            {\n                targetObject = this._instantiateType(expectedSelfType);\n            }\n\n            // Finally, assign deserialized properties to target object.\n            Object.assign(targetObject, sourceObjectWithDeserializedProperties);\n\n            // Call onDeserialized method (if any).\n            if (sourceObjectMetadata.onDeserializedMethodName)\n            {\n                if (typeof (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName] === \"function\")\n                {\n                    (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName]();\n                }\n                else\n                {\n                    this._errorHandler(new TypeError(\n                        `onDeserialized callback '${nameof(sourceObjectMetadata.classType)}.${sourceObjectMetadata.onDeserializedMethodName}' is not a method.`\n                    ));\n                }\n            }\n\n            return targetObject;\n        }\n        else\n        {\n            // Untyped deserialization into Object instance.\n            let targetObject = {} as IndexedObject;\n\n            Object.keys(sourceObject).forEach(sourceKey =>\n            {\n                targetObject[sourceKey] = this.convertSingleValue(sourceObject[sourceKey], {\n                    selfConstructor: sourceObject[sourceKey].constructor,\n                    knownTypes: sourceObjectTypeInfo.knownTypes,\n                    elementConstructor: sourceObjectTypeInfo.elementConstructor,\n                    keyConstructor: sourceObjectTypeInfo.keyConstructor\n                }, sourceKey);\n            });\n\n            return targetObject;\n        }\n    }\n\n    public convertSingleValue(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\")\n    {\n        let expectedSelfType = typeInfo.selfConstructor;\n        let srcTypeNameForDebug = sourceObject ? nameof(sourceObject.constructor) : \"undefined\";\n\n        if (!isValueDefined(sourceObject))\n        {\n            return sourceObject;\n        }\n        else if (this._isDirectlyDeserializableNativeType(expectedSelfType))\n        {\n            if (sourceObject.constructor === expectedSelfType)\n            {\n                return sourceObject;\n            }\n            else\n            {\n                throw new TypeError(this._makeTypeErrorMessage(nameof(expectedSelfType), sourceObject.constructor, memberName));\n            }\n        }\n        else if (expectedSelfType === Date)\n        {\n            // Support for Date with ISO 8601 format, or with numeric timestamp (milliseconds elapsed since the Epoch).\n            // ISO 8601 spec.: https://www.w3.org/TR/NOTE-datetime\n\n            if (typeof sourceObject === \"string\" || (typeof sourceObject === \"number\" && sourceObject > 0))\n                return new Date(sourceObject as any);\n            else\n                this._throwTypeMismatchError(\"Date\", \"an ISO-8601 string\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Float32Array)\n        {\n            // Deserialize Float32Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Float32Array(sourceObject);\n            else\n                this._throwTypeMismatchError(\"Float32Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Float64Array)\n        {\n            // Deserialize Float64Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Float64Array(sourceObject);\n            else\n                this._throwTypeMismatchError(\"Float64Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint8Array)\n        {\n            // Deserialize Uint8Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint8Array(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint8Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint8ClampedArray)\n        {\n            // Deserialize Uint8Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint8ClampedArray(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint8ClampedArray\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint16Array)\n        {\n            // Deserialize Uint16Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint16Array(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint16Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint32Array)\n        {\n            // Deserialize Uint32Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint32Array(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint32Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === ArrayBuffer)\n        {\n            if (typeof sourceObject === \"string\")\n                return this._stringToArrayBuffer(sourceObject);\n            else\n                this._throwTypeMismatchError(\"ArrayBuffer\", \"a string source\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === DataView)\n        {\n            if (typeof sourceObject === \"string\")\n                return this._stringToDataView(sourceObject);\n            else\n                this._throwTypeMismatchError(\"DataView\", \"a string source\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Array)\n        {\n            if (sourceObject instanceof Array)\n                return this.convertAsArray(sourceObject, typeInfo, memberName);\n            else\n                throw new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName));\n        }\n        else if (expectedSelfType === Set)\n        {\n            if (sourceObject instanceof Array)\n                return this.convertAsSet(sourceObject, typeInfo, memberName);\n            else\n                this._throwTypeMismatchError(\"Set\", \"Array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Map)\n        {\n            if (sourceObject instanceof Array)\n                return this.convertAsMap(sourceObject, typeInfo, memberName);\n            else\n                this._throwTypeMismatchError(\"Map\", \"a source array of key-value-pair objects\", srcTypeNameForDebug, memberName);\n        }\n        else if (sourceObject && typeof sourceObject === \"object\")\n        {\n            return this.convertAsObject(sourceObject, typeInfo, memberName);\n        }\n    }\n\n    public convertAsArray(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\"): any[]\n    {\n        if (!(sourceObject instanceof Array))\n        {\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n            return [];\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Array: missing constructor reference of Array elements.`));\n            return [];\n        }\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n\n        return sourceObject.map(element =>\n        {\n            // If an array element fails to deserialize, substitute with undefined. This is so that the original ordering is not interrupted by faulty\n            // entries, as an Array is ordered.\n            try\n            {\n                return this.convertSingleValue(element, elementTypeInfo);\n            }\n            catch (e)\n            {\n                this._errorHandler(e);\n\n                // Keep filling the array here with undefined to keep original ordering.\n                // Note: this is just aesthetics, not returning anything produces the same result.\n                return undefined;\n            }\n        });\n    }\n\n    public convertAsSet(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\")\n    {\n        if (!(sourceObject instanceof Array))\n        {\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n            return new Set<any>();\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Set: missing constructor reference of Set elements.`));\n            return new Set<any>();\n        }\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n        let resultSet = new Set<any>();\n\n        sourceObject.forEach((element, i) =>\n        {\n            try\n            {\n                resultSet.add(this.convertSingleValue(element, elementTypeInfo, memberName + `[${i}]`));\n            }\n            catch (e)\n            {\n                // Faulty entries are skipped, because a Set is not ordered, and skipping an entry does not affect others.\n                this._errorHandler(e);\n            }\n        });\n\n        return resultSet;\n    }\n\n    public convertAsMap(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\")\n    {\n        if (!(sourceObject instanceof Array))\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n\n        if (!typeInfo.keyConstructor)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Map: missing key constructor.`));\n            return new Map<any, any>();\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Map: missing value constructor.`));\n            return new Map<any, any>();\n        }\n\n        let keyTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.keyConstructor,\n            knownTypes: typeInfo.knownTypes\n        };\n\n        let valueTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n\n        let resultMap = new Map<any, any>();\n\n        sourceObject.forEach((element: any) =>\n        {\n            try\n            {\n                let key = this.convertSingleValue(element.key, keyTypeInfo);\n\n                // Undefined/null keys not supported, skip if so.\n                if (isValueDefined(key))\n                {\n                    resultMap.set(key, this.convertSingleValue(\n                        element.value, valueTypeInfo, `${memberName}[${key}]`,\n                    ));\n                }\n            }\n            catch (e)\n            {\n                // Faulty entries are skipped, because a Map is not ordered,\n                // and skipping an entry does not affect others.\n                this._errorHandler(e);\n            }\n        });\n\n        return resultMap;\n    }\n\n    private _throwTypeMismatchError(\n        targetType: string,\n        expectedSourceType: string,\n        actualSourceType: string,\n        memberName: string = \"object\",\n    ) {\n        throw new TypeError(\n            `Could not deserialize ${memberName} as ${targetType}:`\n            + ` expected ${expectedSourceType}, got ${actualSourceType}.`,\n        );\n    }\n\n    private _makeTypeErrorMessage(expectedType: Function | string, actualType: Function | string, memberName = \"object\")\n    {\n        let expectedTypeName = (typeof expectedType === \"function\") ? nameof(expectedType) : expectedType;\n        let actualTypeName = (typeof actualType === \"function\") ? nameof(actualType) : actualType;\n\n        return `Could not deserialize ${memberName}: expected '${expectedTypeName}', got '${actualTypeName}'.`;\n    }\n\n    private _instantiateType(ctor: any)\n    {\n        return new ctor();\n    }\n\n    private _mergeKnownTypes(...knownTypeMaps: Array<Map<string, Function>>)\n    {\n        let result = new Map<string, Function>();\n\n        knownTypeMaps.forEach(knownTypes =>\n        {\n            knownTypes.forEach((ctor, name) =>\n            {\n                if (this._nameResolver)\n                {\n                    result.set(this._nameResolver(ctor), ctor);\n                }\n                else\n                {\n                    result.set(name, ctor);\n                }\n            });\n        });\n\n        return result;\n    }\n\n    private _createKnownTypesMap(knowTypes: Set<Function>)\n    {\n        const map = new Map<string, Function>();\n\n        knowTypes.forEach(ctor =>\n        {\n            if (this._nameResolver)\n            {\n                map.set(this._nameResolver(ctor), ctor);\n            }\n            else\n            {\n                const knownTypeMeta = JsonObjectMetadata.getFromConstructor(ctor);\n                const name = knownTypeMeta && knownTypeMeta.isExplicitlyMarked && knownTypeMeta.name\n                    ? knownTypeMeta.name\n                    : ctor.name;\n                map.set(name, ctor);\n            }\n        });\n\n        return map;\n    }\n\n    private _isDirectlyDeserializableNativeType(ctor: any)\n    {\n        return ~([Number, String, Boolean].indexOf(ctor));\n    }\n\n    public convertNativeObject(sourceObject: any)\n    {\n        return sourceObject;\n    }\n\n    private _stringToArrayBuffer(str: string)\n    {\n        let buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        let bufView = new Uint16Array(buf);\n\n        for (let i = 0, strLen = str.length; i < strLen; i++)\n        {\n            bufView[i] = str.charCodeAt(i);\n        }\n\n        return buf;\n    }\n\n    private _stringToDataView(str: string)\n    {\n        return new DataView(this._stringToArrayBuffer(str));\n    }\n}\n","import { nameof, logError, isValueDefined, isInstanceOf, isTypeTypedArray, isDirectlySerializableNativeType } from \"./helpers\";\nimport { IndexedObject } from \"./types\";\nimport { JsonObjectMetadata } from \"./metadata\";\n\nexport interface IScopeTypeInfo\n{\n    selfType: Function;\n    elementTypes?: Function[];\n    keyType?: Function;\n}\n\nexport interface IScopeArrayTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Array<any>;\n    elementTypes: Function[];\n}\n\nfunction isArrayTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeArrayTypeInfo {\n    return typeInfo.selfType === Array;\n}\n\nexport interface IScopeSetTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Set<any>;\n    elementTypes: [Function];\n}\n\nfunction isSetTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeSetTypeInfo {\n    return typeInfo.selfType === Set;\n}\n\nexport interface IScopeMapTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Map<any, any>;\n    elementTypes: [Function];\n    keyType: Function;\n}\n\nfunction isMapTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeMapTypeInfo {\n    return typeInfo.selfType === Map;\n}\n\n/**\n * Utility class, converts a typed object tree (i.e. a tree of class instances, arrays of class instances, and so on) to an untyped javascript object (also\n * called \"simple javascript object\"), and emits any necessary type hints in the process (for polymorphism).\n *\n * The converted object tree is what will be given to `JSON.stringify` to convert to string as the last step, the serialization is basically like:\n *\n * (1) typed object-tree -> (2) simple JS object-tree -> (3) JSON-string\n */\nexport class Serializer\n{\n    private _typeHintEmitter: (targetObject: IndexedObject, sourceObject: IndexedObject, expectedSourceType: Function, sourceTypeMetadata?: JsonObjectMetadata) => void;\n    private _errorHandler: (error: Error) => void;\n\n    constructor()\n    {\n        this._typeHintEmitter = (targetObject, sourceObject, expectedSourceType, sourceTypeMetadata?: JsonObjectMetadata) =>\n        {\n            // By default, we put a \"__type\" property on the output object if the actual object is not the same as the expected one, so that deserialization\n            // will know what to deserialize into (given the required known-types are defined, and the object is a valid subtype of the expected type).\n            if (sourceObject.constructor !== expectedSourceType)\n            {\n                const name = sourceTypeMetadata && sourceTypeMetadata.name\n                    ? sourceTypeMetadata.name\n                    : nameof(sourceObject.constructor);\n                // TODO: Perhaps this can work correctly without string-literal access?\n                // tslint:disable-next-line:no-string-literal\n                targetObject[\"__type\"] = name;\n            }\n        };\n\n        this._errorHandler = (error) => logError(error);\n    }\n\n    public setTypeHintEmitter(typeEmitterCallback: (targetObject: Object, sourceObject: Object, expectedSourceType: Function) => void)\n    {\n        if (typeof typeEmitterCallback !== \"function\")\n        {\n            throw new TypeError(\"'typeEmitterCallback' is not a function.\");\n        }\n\n        this._typeHintEmitter = typeEmitterCallback;\n    }\n\n    public setErrorHandler(errorHandlerCallback: (error: Error) => void)\n    {\n        if (typeof errorHandlerCallback !== \"function\")\n        {\n            throw new TypeError(\"'errorHandlerCallback' is not a function.\");\n        }\n\n        this._errorHandler = errorHandlerCallback;\n    }\n\n    /**\n     * Convert a value of any supported serializable type.\n     * The value type will be detected, and the correct serialization method will be called.\n     */\n    public convertSingleValue(sourceObject: any, typeInfo: IScopeTypeInfo, memberName: string = \"object\"): any\n    {\n        if (!isValueDefined(sourceObject)) return;\n\n        if (!isInstanceOf(sourceObject, typeInfo.selfType))\n        {\n            let expectedName = nameof(typeInfo.selfType);\n            let actualName = nameof(sourceObject.constructor);\n\n            this._errorHandler(new TypeError(`Could not serialize '${memberName}': expected '${expectedName}', got '${actualName}'.`));\n            return;\n        }\n\n        if (isDirectlySerializableNativeType(typeInfo.selfType))\n        {\n            return sourceObject;\n        }\n        else if (typeInfo.selfType === ArrayBuffer)\n        {\n            return this.convertAsArrayBuffer(sourceObject);\n        }\n        else if (typeInfo.selfType === DataView)\n        {\n            return this.convertAsDataView(sourceObject);\n        }\n        else if (isArrayTypeInfo(typeInfo))\n        {\n            return this.convertAsArray(sourceObject, typeInfo.elementTypes, memberName);\n        }\n        else if (isSetTypeInfo(typeInfo))\n        {\n            return this.convertAsSet(sourceObject, typeInfo.elementTypes[0], memberName);\n        }\n        else if (isMapTypeInfo(typeInfo))\n        {\n            return this.convertAsMap(sourceObject, typeInfo.keyType, typeInfo.elementTypes[0], memberName);\n        }\n        else if (isTypeTypedArray(typeInfo.selfType))\n        {\n            return this.convertAsTypedArray(sourceObject);\n        }\n        else if (typeof sourceObject === \"object\")\n        {\n            return this.convertAsObject(sourceObject, typeInfo, memberName);\n        }\n    }\n\n    /**\n     * Performs the conversion of a typed object (usually a class instance) to a simple javascript object for serialization.\n     */\n    public convertAsObject(sourceObject: IndexedObject, typeInfo: IScopeTypeInfo, memberName?: string)\n    {\n        let sourceTypeMetadata: JsonObjectMetadata|undefined;\n        let targetObject: IndexedObject;\n\n        if (sourceObject.constructor !== typeInfo.selfType && sourceObject instanceof typeInfo.selfType)\n        {\n            // The source object is not of the expected type, but it is a valid subtype.\n            // This is OK, and we'll proceed to gather object metadata from the subtype instead.\n            sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(sourceObject.constructor);\n        }\n        else\n        {\n            sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(typeInfo.selfType);\n        }\n\n        if (sourceTypeMetadata)\n        {\n            const sourceMeta = sourceTypeMetadata;\n            // Strong-typed serialization available.\n            // We'll serialize by members that have been marked with @jsonMember (including array/set/map members), and perform recursive conversion on\n            // each of them. The converted objects are put on the 'targetObject', which is what will be put into 'JSON.stringify' finally.\n            targetObject = {};\n\n            sourceTypeMetadata.dataMembers.forEach((memberMetadata) =>\n            {\n                if (memberMetadata.serializer) {\n                    targetObject[memberMetadata.name] =\n                        memberMetadata.serializer(sourceObject[memberMetadata.key]);\n                } else if (memberMetadata.ctor) {\n                    targetObject[memberMetadata.name] = this.convertSingleValue(\n                        sourceObject[memberMetadata.key],\n                        {\n                            selfType: memberMetadata.ctor,\n                            elementTypes: memberMetadata.elementType,\n                            keyType: memberMetadata.keyType,\n                        },\n                        `${nameof(sourceMeta.classType)}.${memberMetadata.key}`,\n                    );\n                } else {\n                    throw new TypeError(\n                        `Could not serialize ${memberMetadata.name}, there is`\n                        + ` no constructor nor serialization function to use.`,\n                    );\n                }\n            });\n        }\n        else\n        {\n            // Untyped serialization, \"as-is\", we'll just pass the object on.\n            // We'll clone the source object, because type hints are added to the object itself, and we don't want to modify to the original object.\n            targetObject = { ...sourceObject };\n        }\n\n        // Add type-hint.\n        this._typeHintEmitter(targetObject, sourceObject, typeInfo.selfType, sourceTypeMetadata);\n\n        return targetObject;\n    }\n\n    /**\n     * Performs the conversion of an array of typed objects (or primitive values) to an array of simple javascript objects (or primitive values) for\n     * serialization.\n     * @param expectedElementType The expected type of elements. If the array is supposed to be multi-dimensional, subsequent elements define lower dimensions.\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     */\n    public convertAsArray(sourceObject: any[], expectedElementType: Function[], memberName = \"object\"): any[]\n    {\n        if (expectedElementType.length === 0 || !expectedElementType[0])\n           throw new TypeError(`Could not serialize ${memberName} as Array: missing element type definition.`);\n\n        // Check the type of each element, individually.\n        // If at least one array element type is incorrect, we return undefined, which results in no value emitted during serialization.\n        // This is so that invalid element types don't unexpectedly alter the ordering of other, valid elements, and that no unexpected undefined values are in\n        // the emitted array.\n        sourceObject.forEach((element, i) =>\n        {\n            if (!isInstanceOf(element, expectedElementType[0]))\n            {\n                const expectedTypeName = nameof(expectedElementType[0]);\n                const actualTypeName = nameof(element.constructor);\n                throw new TypeError(`Could not serialize ${memberName}[${i}]: expected '${expectedTypeName}', got '${actualTypeName}'.`);\n            }\n        });\n\n        const typeInfoForElements: IScopeTypeInfo = {\n            selfType: expectedElementType[0],\n            elementTypes: expectedElementType.length > 1 ? expectedElementType.slice(1) : [], // For multidimensional arrays.\n        };\n\n        if (memberName)\n        {\n            // Just for debugging purposes.\n            memberName += \"[]\";\n        }\n\n        return sourceObject.map(element => this.convertSingleValue(element, typeInfoForElements, memberName));\n    }\n\n    /**\n     * Performs the conversion of a set of typed objects (or primitive values) into an array of simple javascript objects.\n     *\n     * @param sourceObject\n     * @param expectedElementType The constructor of the expected Set elements (e.g. `Number` for `Set<number>`, or `MyClass` for `Set<MyClass>`).\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     * @returns\n     */\n    public convertAsSet(sourceObject: Set<any>, expectedElementType: Function, memberName = \"object\"): any[]\n    {\n        if (!expectedElementType)\n            throw new TypeError(`Could not serialize ${memberName} as Set: missing element type definition.`);\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfType: expectedElementType,\n        };\n\n        // For debugging and error tracking.\n        if (memberName) memberName += \"[]\";\n\n        let resultArray: any[] = [];\n\n        // Convert each element of the set, and put it into an output array.\n        // The output array is the one serialized, as JSON.stringify does not support Set serialization. (TODO: clarification needed)\n        sourceObject.forEach(element =>\n        {\n            let resultElement = this.convertSingleValue(element, elementTypeInfo, memberName);\n\n            // Add to output if the source element was undefined, OR the converted element is defined. This will add intentionally undefined values to output,\n            // but not values that became undefined DURING serializing (usually because of a type-error).\n            if (!isValueDefined(element) || isValueDefined(resultElement))\n            {\n                resultArray.push(resultElement);\n            }\n        });\n\n        return resultArray;\n    }\n\n    /**\n     * Performs the conversion of a map of typed objects (or primitive values) into an array of simple javascript objects with `key` and `value` properties.\n     *\n     * @param sourceObject\n     * @param expectedKeyType The constructor of the expected Map keys (e.g. `Number` for `Map<number, any>`, or `MyClass` for `Map<MyClass, any>`).\n     * @param expectedElementType The constructor of the expected Map values (e.g. `Number` for `Map<any, number>`, or `MyClass` for `Map<any, MyClass>`).\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     */\n    public convertAsMap(sourceObject: Map<any, any>, expectedKeyType: Function, expectedElementType: Function, memberName = \"object\"): Array<{ key: any, value: any }>\n    {\n        if (!expectedElementType)\n            throw new TypeError(`Could not serialize ${memberName} as Map: missing value type definition.`);\n\n        if (!expectedKeyType)\n            throw new TypeError(`Could not serialize ${memberName} as Map: missing key type definition.`);\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfType: expectedElementType,\n            elementTypes: [expectedElementType]\n        };\n\n        let keyTypeInfo: IScopeTypeInfo = {\n            selfType: expectedKeyType\n        };\n\n        if (memberName) memberName += \"[]\";\n\n        let resultArray: Array<{ key: any, value: any }> = [];\n\n        // Convert each *entry* in the map to a simple javascript object with key and value properties.\n        sourceObject.forEach((value, key) =>\n        {\n            let resultKeyValuePairObj = {\n                key: this.convertSingleValue(key, keyTypeInfo, memberName),\n                value: this.convertSingleValue(value, elementTypeInfo, memberName)\n            };\n\n            // We are not going to emit entries with undefined keys OR undefined values.\n            if (isValueDefined(resultKeyValuePairObj.key) && isValueDefined(resultKeyValuePairObj.value))\n            {\n                resultArray.push(resultKeyValuePairObj);\n            }\n        });\n\n        return resultArray;\n    }\n\n    /**\n     * Performs the conversion of a typed javascript array to a simple untyped javascript array.\n     * This is needed because typed arrays are otherwise serialized as objects, so we'll end up with something like \"{ 0: 0, 1: 1, ... }\".\n     *\n     * @param sourceObject\n     * @returns\n     */\n    public convertAsTypedArray(sourceObject: ArrayBufferView)\n    {\n        return Array.from(sourceObject as any);\n    }\n\n    /**\n     * Performs the conversion of a raw ArrayBuffer to a string.\n     */\n    public convertAsArrayBuffer(buffer: ArrayBuffer)\n    {\n        // ArrayBuffer -> 16-bit character codes -> character array -> joined string.\n        return Array.from(new Uint16Array(buffer)).map(charCode => String.fromCharCode(charCode)).join(\"\");\n    }\n\n    /**\n     * Performs the conversion of DataView, converting its internal ArrayBuffer to a string and returning that string.\n     */\n    public convertAsDataView(dataView: DataView)\n    {\n        return this.convertAsArrayBuffer(dataView.buffer);\n    }\n}\n","import { Constructor, ParameterlessConstructor } from \"./types\";\nimport { METADATA_FIELD_KEY } from \"./helpers\";\nimport { JsonObjectMetadata } from \"./metadata\";\n\nexport interface IJsonObjectOptionsBase\n{\n    /**\n     * An array of known types to recognize when encountering type-hints,\n     * or the name of a static method used for determining known types.\n     */\n    knownTypes?: Function[] | string;\n\n    /**\n     * The name of a static or instance method to call when deserialization\n     * of the object is completed.\n     */\n    onDeserialized?: string;\n\n    /**\n     * The name used to differentiate between different polymorphic types.\n     */\n    name?: string;\n}\n\nexport interface IJsonObjectOptionsWithInitializer<T> extends IJsonObjectOptionsBase\n{\n    /**\n     * The name of a static method to call before deserializing and initializing the object, accepting two arguments: (1) sourceObject, an 'Object' instance\n     * with all properties already deserialized, and (2) rawSourceObject, a raw 'Object' instance representation of the current object in the serialized JSON\n     * (i.e. without deserialized properties).\n     */\n    initializer: (sourceObject: T, rawSourceObject: T) => T;\n}\n\nexport interface IJsonObjectOptions<T> extends IJsonObjectOptionsBase\n{\n    /**\n     * The name of a static method to call before deserializing and initializing the object, accepting two arguments: (1) sourceObject, an 'Object' instance\n     * with all properties already deserialized, and (2) rawSourceObject, a raw 'Object' instance representation of the current object in the serialized JSON\n     * (i.e. without deserialized properties).\n     */\n    initializer?: (sourceObject: T, rawSourceObject: T) => T;\n}\n\n/**\n * Marks that a class with a parameterized constructor is serializable using TypedJSON, with additional settings. The 'initializer' setting must be specified.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptionsWithInitializer<T>): (target: Constructor<T>) => void;\n\n/**\n * Marks that a class is serializable using TypedJSON, with additional settings.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptions<T>): (target: ParameterlessConstructor<T>) => void;\n\n/**\n * Marks that a class with a parameterless constructor is serializable using TypedJSON.\n */\nexport function jsonObject<T>(target: ParameterlessConstructor<T>): void;\n\nexport function jsonObject<T extends Object>(optionsOrTarget?: IJsonObjectOptions<T> | Constructor<T>\n): ((target: Constructor<T>) => void) | void {\n    let options: IJsonObjectOptions<T>;\n\n    if (typeof optionsOrTarget === \"function\")\n    {\n        // jsonObject is being used as a decorator, directly.\n        options = {};\n    }\n    else\n    {\n        // jsonObject is being used as a decorator factory.\n        options = optionsOrTarget || {};\n    }\n\n    function decorator(\n        target: Function\n    ): void {\n        let objectMetadata: JsonObjectMetadata;\n\n        // Create or obtain JsonObjectMetadata object.\n        if (!target.prototype.hasOwnProperty(METADATA_FIELD_KEY))\n        {\n            // Target has no JsonObjectMetadata associated with it yet, create it now.\n            objectMetadata = new JsonObjectMetadata(target);\n\n            // Inherit json members and known types from parent @jsonObject (if any).\n            const parentMetadata: JsonObjectMetadata = target.prototype[METADATA_FIELD_KEY];\n            if (parentMetadata)\n            {\n                parentMetadata.dataMembers\n                    .forEach((memberMetadata, propKey) =>\n                        objectMetadata.dataMembers.set(propKey, memberMetadata));\n                parentMetadata.knownTypes\n                    .forEach((knownType) => objectMetadata.knownTypes.add(knownType));\n            }\n\n            Object.defineProperty(target.prototype, METADATA_FIELD_KEY, {\n                enumerable: false,\n                configurable: false,\n                writable: false,\n                value: objectMetadata\n            });\n        }\n        else\n        {\n            // Target already has JsonObjectMetadata associated with it.\n            objectMetadata = target.prototype[METADATA_FIELD_KEY];\n            objectMetadata.classType = target;\n        }\n\n        // Fill JsonObjectMetadata.\n        objectMetadata.isExplicitlyMarked = true;\n        objectMetadata.onDeserializedMethodName = options.onDeserialized;\n        // T extend Object so it is fine\n        objectMetadata.initializerCallback = options.initializer as any;\n        if (options.name)\n        {\n            objectMetadata.name = options.name;\n        }\n\n        // Obtain known-types.\n        if (typeof options.knownTypes === \"string\")\n        {\n            objectMetadata.knownTypeMethodName = options.knownTypes;\n        }\n        else if (options.knownTypes instanceof Array)\n        {\n            options.knownTypes\n                .filter(knownType => !!knownType)\n                .forEach(knownType => objectMetadata.knownTypes.add(knownType));\n        }\n    }\n\n    if (typeof optionsOrTarget === \"function\")\n    {\n        // jsonObject is being used as a decorator, directly.\n        decorator(optionsOrTarget);\n    }\n    else\n    {\n        // jsonObject is being used as a decorator factory.\n        return decorator;\n    }\n}\n","import {\n    nameof, logError, isReflectMetadataSupported, isValueDefined, logWarning, isSubtypeOf\n} from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMemberOptions\n{\n    /**\n     * Sets the constructor of the property.\n     * Optional with ReflectDecorators.\n     */\n    constructor?: Function;\n\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted if the property is uninitialized/undefined. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name. */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property is part of the object when serializing, with additional options.\n * Omitting the 'constructor' option requires ReflectDecorators and that the property type is always explicitly declared.\n * @param options Additional options.\n */\nexport function jsonMember<TFunction extends Function>(options: IJsonMemberOptions): PropertyDecorator;\n\n/**\n * Specifies that a property is part of the object when serializing.\n * This call signature requires ReflectDecorators and that the property type is always explicitly declared.\n */\nexport function jsonMember(target: Object, propertyKey: string | symbol): void;\n\nexport function jsonMember<TFunction extends Function>(optionsOrTarget?: IJsonMemberOptions | Object, propKey?: string | symbol): PropertyDecorator | void\n{\n    if (optionsOrTarget instanceof Object && (typeof propKey === \"string\" || typeof propKey === \"symbol\"))\n    {\n        const target = optionsOrTarget;\n        // For error messages.\n        const decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(propKey)}`;\n\n        // jsonMember used directly, no additional information directly available besides target and propKey.\n        // Obtain property constructor through ReflectDecorators.\n        if (isReflectMetadataSupported)\n        {\n            const reflectPropCtor = Reflect.getMetadata(\"design:type\", target, propKey) as Function;\n\n            if (!reflectPropCtor)\n            {\n                logError(`${decoratorName}: could not resolve detected property constructor at runtime.`);\n                return;\n            }\n\n            if (isSpecialPropertyType(decoratorName, reflectPropCtor))\n            {\n                return;\n            }\n\n            injectMetadataInformation(target, propKey, {\n                ctor: reflectPropCtor,\n                key: propKey.toString(),\n                name: propKey.toString(),\n            });\n        }\n        else\n        {\n            logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n            return;\n        }\n    }\n    else\n    {\n        // jsonMember used as a decorator factory.\n        return (target: Object, _propKey: string | symbol) =>\n        {\n            let options: IJsonMemberOptions = optionsOrTarget || {};\n            let propCtor: Function|undefined;\n            let decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(_propKey)}`; // For error messages.\n\n            if (options.hasOwnProperty(\"constructor\"))\n            {\n                if (!isValueDefined(options.constructor))\n                {\n                    logError(`${decoratorName}: cannot resolve specified property constructor at runtime.`);\n                    return;\n                }\n\n                // Property constructor has been specified. Use ReflectDecorators (if available) to check whether that constructor is correct. Warn if not.\n                if (isReflectMetadataSupported && !isSubtypeOf(options.constructor, Reflect.getMetadata(\"design:type\", target, _propKey)))\n                {\n                    logWarning(`${decoratorName}: detected property type does not match 'constructor' option.`);\n                }\n\n                propCtor = options.constructor;\n            }\n            else\n            {\n                // Use ReflectDecorators to obtain property constructor.\n                if (isReflectMetadataSupported)\n                {\n                    propCtor = Reflect.getMetadata(\"design:type\", target, _propKey) as Function;\n\n                    if (!propCtor)\n                    {\n                        logError(`${decoratorName}: cannot resolve detected property constructor at runtime.`);\n                        return;\n                    }\n                }\n                else if (!options.deserializer)\n                {\n                    logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n                    return;\n                }\n            }\n\n            if (isSpecialPropertyType(decoratorName, propCtor))\n            {\n                return;\n            }\n\n            injectMetadataInformation(target, _propKey, {\n                ctor: propCtor,\n                emitDefaultValue: options.emitDefaultValue || false,\n                isRequired: options.isRequired || false,\n                key: _propKey.toString(),\n                name: options.name || _propKey.toString(),\n                deserializer: options.deserializer,\n                serializer: options.serializer,\n            });\n        };\n    }\n}\n\nfunction isSpecialPropertyType(decoratorName: string, propCtor?: Function)\n{\n    if (propCtor === Array)\n    {\n        logError(`${decoratorName}: property is an Array. Use the jsonArrayMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (propCtor === Set)\n    {\n        logError(`${decoratorName}: property is a Set. Use the jsonSetMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (propCtor === Map)\n    {\n        logError(`${decoratorName}: property is a Map. Use the jsonMapMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    return false;\n}\n","import { nameof, logError, isReflectMetadataSupported } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonArrayMemberOptions\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, an empty array is emitted if the property is undefined/uninitialized. */\n    emitDefaultValue?: boolean;\n\n    /** Sets array dimensions (e.g. 1 for 'number[]' or 2 for 'number[][]'). Defaults to 1. */\n    dimensions?: number;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property, of type array, is part of an object when serializing.\n * @param elementConstructor Constructor of array elements (e.g. 'Number' for 'number[]', or 'Date' for 'Date[]').\n * @param options Additional options.\n */\nexport function jsonArrayMember(elementConstructor: Function, options: IJsonArrayMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        let decoratorName = `@jsonArrayMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof elementConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of array elements at runtime.`);\n            return;\n        }\n\n        const dimensions = options.dimensions === undefined ? 1 : options.dimensions;\n        if (!isNaN(dimensions) && dimensions < 1)\n        {\n            logError(`${decoratorName}: 'dimensions' option must be at least 1.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonArrayMember' has been used on an array.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Array)\n        {\n            logError(`${decoratorName}: property is not an Array.`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Array,\n            elementType: createArrayElementType(elementConstructor, dimensions),\n            emitDefaultValue: options.emitDefaultValue || false,\n            isRequired: options.isRequired || false,\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n\nfunction createArrayElementType(elementCtor: Function, dimensions: number) {\n    const elementTypes = new Array(dimensions).fill(Array, 0, -1);\n    elementTypes[dimensions-1] = elementCtor;\n    return elementTypes;\n}\n","import { nameof } from \"./helpers\";\nimport { IJsonMemberOptions } from \"./json-member\";\nimport { JsonMemberMetadata, JsonObjectMetadata, injectMetadataInformation } from \"./metadata\";\nimport * as Helpers from \"./helpers\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonSetMemberOptions\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Set<T>.\n * @param elementConstructor Constructor of set elements (e.g. 'Number' for Set<number> or 'Date' for Set<Date>).\n * @param options Additional options.\n */\nexport function jsonSetMember(elementConstructor: Function, options: IJsonSetMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        var decoratorName = `@jsonSetMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof elementConstructor !== \"function\")\n        {\n            Helpers.logError(`${decoratorName}: could not resolve constructor of set elements at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonSetMember' has been used on a set. Warn if not.\n        if (Helpers.isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Set)\n        {\n            Helpers.logError(`${decoratorName}: property is not a Set.`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Set,\n            elementType: [elementConstructor],\n            emitDefaultValue: options.emitDefaultValue || false,\n            isRequired: options.isRequired || false,\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import { nameof, logError, isReflectMetadataSupported } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMapMemberOptions\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Map<K, V>.\n * @param keyConstructor Constructor of map keys (e.g. 'Number' for 'Map<number, Date>').\n * @param valueConstructor Constructor of map values (e.g. 'Date' for 'Map<number, Date>').\n * @param options Additional options.\n */\nexport function jsonMapMember(keyConstructor: Function, valueConstructor: Function, options: IJsonMapMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        let decoratorName = `@jsonMapMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof keyConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of map keys at runtime.`);\n            return;\n        }\n\n        if (typeof valueConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of map values at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonMapMember' has been used on a map. Warn if not.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Map)\n        {\n            logError(`${decoratorName}: property is not a Map.`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Map,\n            elementType: [valueConstructor],\n            keyType: keyConstructor,\n            emitDefaultValue: options.emitDefaultValue || false,\n            isRequired: options.isRequired || false,\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import { nameof, logError, logWarning } from './typedjson/helpers';\nimport { Constructor } from \"./typedjson/types\";\nimport { JsonObjectMetadata } from \"./typedjson/metadata\";\nimport { Deserializer } from \"./typedjson/deserializer\";\nimport { Serializer } from \"./typedjson/serializer\";\n\nexport type JsonTypes = Object|boolean|string|number|null|undefined;\n\nexport interface ITypedJSONSettings\n{\n    /**\n     * Sets the handler callback to invoke on errors during serializing and deserializing.\n     * Re-throwing errors in this function will halt serialization/deserialization.\n     * The default behavior is to log errors to the console.\n     */\n    errorHandler?: (e: Error) => void;\n\n    /**\n     * Sets a callback that determines the constructor of the correct sub-type of polymorphic\n     * objects while deserializing.\n     * The default behavior is to read the type-name from the '__type' property of 'sourceObject',\n     * and look it up in 'knownTypes'.\n     * The constructor of the sub-type should be returned.\n     */\n    typeResolver?: (sourceObject: Object, knownTypes: Map<string, Function>) => Function;\n\n    nameResolver?: (ctor: Function) => string;\n\n    /**\n     * Sets a callback that writes type-hints to serialized objects.\n     * The default behavior is to write the type-name to the '__type' property, if a derived type\n     * is present in place of a base type.\n     */\n    typeHintEmitter?:\n        (targetObject: Object, sourceObject: Object, expectedSourceType: Function) => void;\n\n    /**\n     * Sets the amount of indentation to use in produced JSON strings.\n     * Default value is 0, or no indentation.\n     */\n    indent?: number;\n\n    replacer?: (key: string, value: any) => any;\n\n    knownTypes?: Array<Constructor<any>>;\n}\n\nexport class TypedJSON<T>\n{\n    //#region Static\n    public static parse<T>(\n        object: any, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): T|undefined {\n        return new TypedJSON(rootType, settings).parse(object);\n    }\n\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: 1\n    ): T[];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 2\n    ): T[][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 3\n    ): T[][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 4\n    ): T[][][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 5\n    ): T[][][][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: number\n    ): any[] {\n        return new TypedJSON(elementType, settings).parseAsArray(object, dimensions as any);\n    }\n\n    public static parseAsSet<T>(\n        object: any, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): Set<T> {\n        return new TypedJSON(elementType, settings).parseAsSet(object);\n    }\n\n    public static parseAsMap<K, V>(\n        object: any,\n        keyType: Constructor<K>,\n        valueType: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): Map<K, V> {\n        return new TypedJSON(valueType, settings).parseAsMap(object, keyType);\n    }\n\n    public static toPlainJson<T>(\n        object: T, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): JsonTypes {\n        return new TypedJSON(rootType, settings).toPlainJson(object);\n    }\n\n    public static toPlainArray<T>(\n        object: T[], elementType: Constructor<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): Object[];\n    public static toPlainArray<T>(\n        object: T[][], elementType: Constructor<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): Object[][];\n    public static toPlainArray<T>(\n        object: T[][][], elementType: Constructor<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): Object[][][];\n    public static toPlainArray<T>(\n        object: T[][][][], elementType: Constructor<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): Object[][][][];\n    public static toPlainArray<T>(\n        object: T[][][][][], elementType: Constructor<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): Object[][][][][];\n    public static toPlainArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): any[];\n    public static toPlainArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions?: any, settings?: ITypedJSONSettings,\n    ): any[] {\n        return new TypedJSON(elementType, settings).toPlainArray(object, dimensions);\n    }\n\n    public static toPlainSet<T>(\n        object: Set<T>, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsSet(object);\n    }\n\n    public static toPlainMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Constructor<K>,\n        valueCtor: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(valueCtor, settings).stringifyAsMap(object, keyCtor);\n    }\n\n    public static stringify<T>(\n        object: T, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(rootType, settings).stringify(object);\n    }\n\n    public static stringifyAsArray<T>(\n        object: T[], elementType: Constructor<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][], elementType: Constructor<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][], elementType: Constructor<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][][], elementType: Constructor<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][][][], elementType: Constructor<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions?: any, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsArray(object, dimensions);\n    }\n\n    public static stringifyAsSet<T>(\n        object: Set<T>, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsSet(object);\n    }\n\n    public static stringifyAsMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Constructor<K>,\n        valueCtor: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(valueCtor, settings).stringifyAsMap(object, keyCtor);\n    }\n\n    private static _globalConfig: ITypedJSONSettings;\n\n    public static setGlobalConfig(config: ITypedJSONSettings)\n    {\n        if (this._globalConfig)\n        {\n            Object.assign(this._globalConfig, config);\n        }\n        else\n        {\n            this._globalConfig = config;\n        }\n    }\n\n    //#endregion\n\n    private serializer: Serializer = new Serializer();\n    private deserializer: Deserializer<T> = new Deserializer<T>();\n    private globalKnownTypes: Array<Constructor<any>> = [];\n    private indent: number = 0;\n    private rootConstructor: Constructor<T>;\n    private errorHandler: (e: Error) => void;\n    private nameResolver: (ctor: Function) => string;\n    private replacer?: (key: string, value: any) => any;\n\n    /**\n     * Creates a new TypedJSON instance to serialize (stringify) and deserialize (parse) object\n     *     instances of the specified root class type.\n     * @param rootType The constructor of the root class type.\n     * @param settings Additional configuration settings.\n     */\n    constructor(rootConstructor: Constructor<T>, settings?: ITypedJSONSettings)\n    {\n        let rootMetadata = JsonObjectMetadata.getFromConstructor(rootConstructor);\n\n        if (!rootMetadata || (!rootMetadata.isExplicitlyMarked && !rootMetadata.isHandledWithoutAnnotation))\n        {\n            throw new TypeError(\"The TypedJSON root data type must have the @jsonObject decorator used.\");\n        }\n\n        this.nameResolver = (ctor) => nameof(ctor);\n        this.rootConstructor = rootConstructor;\n        this.errorHandler = (error) => logError(error);\n\n        if (settings)\n        {\n            this.config(settings);\n        }\n        else if (TypedJSON._globalConfig)\n        {\n            this.config({});\n        }\n    }\n\n    /**\n     * Configures TypedJSON through a settings object.\n     * @param settings The configuration settings object.\n     */\n    public config(settings: ITypedJSONSettings)\n    {\n        if (TypedJSON._globalConfig)\n        {\n            settings = {\n                ...TypedJSON._globalConfig,\n                ...settings\n            };\n\n            if (settings.knownTypes && TypedJSON._globalConfig.knownTypes)\n            {\n                // Merge known-types (also de-duplicate them, so Array -> Set -> Array).\n                settings.knownTypes = Array.from(new Set(\n                    settings.knownTypes.concat(TypedJSON._globalConfig.knownTypes),\n                ));\n            }\n        }\n\n        if (settings.errorHandler)\n        {\n            this.errorHandler = settings.errorHandler;\n            this.deserializer.setErrorHandler(settings.errorHandler);\n            this.serializer.setErrorHandler(settings.errorHandler);\n        }\n\n        if (settings.replacer) this.replacer = settings.replacer;\n        if (settings.typeResolver) this.deserializer.setTypeResolver(settings.typeResolver);\n        if (settings.typeHintEmitter) this.serializer.setTypeHintEmitter(settings.typeHintEmitter);\n        if (settings.indent) this.indent = settings.indent;\n\n        if (settings.nameResolver)\n        {\n            this.nameResolver = settings.nameResolver;\n            this.deserializer.setNameResolver(settings.nameResolver);\n            // this.serializer.set\n        }\n\n        if (settings.knownTypes)\n        {\n            // Type-check knownTypes elements to recognize errors in advance.\n            settings.knownTypes.forEach((knownType, i) =>\n            {\n                // tslint:disable-next-line:no-null-keyword\n                if (typeof knownType === \"undefined\" || knownType === null)\n                {\n                    logWarning(\n                        `TypedJSON.config: 'knownTypes' contains an undefined/null value (element ${i}).`);\n                }\n            });\n\n            this.globalKnownTypes = settings.knownTypes;\n        }\n    }\n\n    /**\n     * Converts a JSON string to the root class type.\n     * @param object The JSON to parse and convert.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns Deserialized T or undefined if there were errors.\n     */\n    public parse(object: any): T|undefined\n    {\n        const json = JSON.parse(object);\n\n        let rootMetadata = JsonObjectMetadata.getFromConstructor(this.rootConstructor);\n        let result: T|undefined;\n        let knownTypes = new Map<string, Function>();\n\n        this.globalKnownTypes.filter(ktc => ktc).forEach(knownTypeCtor =>\n        {\n            knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n        });\n\n        if (rootMetadata)\n        {\n            rootMetadata.knownTypes.forEach(knownTypeCtor =>\n            {\n                knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n            });\n        }\n\n        try\n        {\n            result = this.deserializer.convertSingleValue(json, {\n                selfConstructor: this.rootConstructor,\n                knownTypes: knownTypes,\n            }) as T;\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n\n        return result;\n    }\n\n    public parseAsArray(object: any, dimensions?: 1): T[];\n    public parseAsArray(object: any, dimensions: 2): T[][];\n    public parseAsArray(object: any, dimensions: 3): T[][][];\n    public parseAsArray(object: any, dimensions: 4): T[][][][];\n    public parseAsArray(object: any, dimensions: 5): T[][][][][];\n    public parseAsArray(object: any, dimensions: number): any[];\n    public parseAsArray(object: any, dimensions: number = 1): any[]\n    {\n        const json = JSON.parse(object);\n        if (json instanceof Array)\n        {\n            return this.deserializer.convertAsArray(json, {\n                selfConstructor: Array,\n                elementConstructor: new Array(dimensions - 1)\n                    .fill(Array)\n                    .concat(this.rootConstructor),\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes),\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define an Array`\n                + `, but got ${typeof json}.`));\n        }\n\n        return [];\n    }\n\n    public parseAsSet(object: any): Set<T>\n    {\n        const json = JSON.parse(object);\n        // A Set<T> is serialized as T[].\n        if (json instanceof Array)\n        {\n            return this.deserializer.convertAsSet(json, {\n                selfConstructor: Array,\n                elementConstructor: [this.rootConstructor],\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes)\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define a Set (using an Array)`\n                + `, but got ${typeof json}.`,\n            ));\n        }\n\n        return new Set<T>();\n    }\n\n    public parseAsMap<K>(object: any, keyConstructor: Constructor<K>): Map<K, T>\n    {\n        const json = JSON.parse(object);\n        // A Set<T> is serialized as T[].\n        if (json instanceof Array)\n        {\n            return this.deserializer.convertAsMap(json, {\n                selfConstructor: Array,\n                elementConstructor: [this.rootConstructor],\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes),\n                keyConstructor: keyConstructor\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define a Set (using an Array)`\n                + `, but got ${typeof json}.`,\n            ));\n        }\n\n        return new Map<K, T>();\n    }\n\n    /**\n     * Converts an instance of the specified class type to a plain JSON object.\n     * @param object The instance to convert to a JSON string.\n     * @returns Serialized object or undefined if an error has occured.\n     */\n    public toPlainJson(object: T): JsonTypes\n    {\n        try\n        {\n            return this.serializer.convertSingleValue(object, {\n                selfType: this.rootConstructor\n            });\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainArray(object: T[], dimensions?: 1): Object[];\n    public toPlainArray(object: T[][], dimensions: 2): Object[][];\n    public toPlainArray(object: T[][][], dimensions: 3): Object[][][];\n    public toPlainArray(object: T[][][][], dimensions: 4): Object[][][][];\n    public toPlainArray(object: T[][][][][], dimensions: 5): Object[][][][][];\n    public toPlainArray(object: any[], dimensions: 1|2|3|4|5 = 1): Object[]|undefined\n    {\n        try\n        {\n            const elementConstructorArray =\n                new Array(dimensions - 1).fill(Array).concat(this.rootConstructor);\n            return this.serializer.convertAsArray(object, elementConstructorArray);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainSet(object: Set<T>): Object[]|undefined\n    {\n        try\n        {\n            return this.serializer.convertAsSet(object, this.rootConstructor);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainMap<K>(object: Map<K, T>, keyConstructor: Constructor<K>): { key: any, value: any }[]|undefined\n    {\n        try\n        {\n            return this.serializer.convertAsMap(object, keyConstructor, this.rootConstructor);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    /**\n     * Converts an instance of the specified class type to a JSON string.\n     * @param object The instance to convert to a JSON string.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns String with the serialized object or an empty string if an error has occured, but\n     *     the errorHandler did not throw.\n     */\n    public stringify(object: T): string\n    {\n        const result = this.toPlainJson(object);\n        if (result === undefined) {\n            return '';\n        }\n        return JSON.stringify(result, this.replacer, this.indent);\n    }\n\n    public stringifyAsArray(object: T[], dimensions?: 1): string;\n    public stringifyAsArray(object: T[][], dimensions: 2): string;\n    public stringifyAsArray(object: T[][][], dimensions: 3): string;\n    public stringifyAsArray(object: T[][][][], dimensions: 4): string;\n    public stringifyAsArray(object: T[][][][][], dimensions: 5): string;\n    public stringifyAsArray(object: any[], dimensions: any): string\n    {\n        return JSON.stringify(this.toPlainArray(object, dimensions), this.replacer, this.indent);\n    }\n\n    public stringifyAsSet(object: Set<T>): string\n    {\n        return JSON.stringify(this.toPlainSet(object), this.replacer, this.indent);\n    }\n\n    public stringifyAsMap<K>(object: Map<K, T>, keyConstructor: Constructor<K>): string\n    {\n        return JSON.stringify(this.toPlainMap(object, keyConstructor), this.replacer, this.indent);\n    }\n\n    private _mapKnownTypes(constructors: Array<Constructor<any>>)\n    {\n        let map = new Map<string, Constructor<any>>();\n\n        constructors.filter(ctor => ctor).forEach(ctor => map.set(this.nameResolver(ctor), ctor));\n\n        return map;\n    }\n}\n\nexport { jsonObject } from \"./typedjson/json-object\";\nexport { jsonMember } from \"./typedjson/json-member\";\nexport { jsonArrayMember } from \"./typedjson/json-array-member\";\nexport { jsonSetMember } from \"./typedjson/json-set-member\";\nexport { jsonMapMember } from \"./typedjson/json-map-member\";\n"],"sourceRoot":""}