{"version":3,"sources":["webpack://typedjson/webpack/universalModuleDefinition","webpack://typedjson/webpack/bootstrap","webpack://typedjson/./src/typedjson/helpers.ts","webpack://typedjson/./src/typedjson/metadata.ts","webpack://typedjson/./src/typedjson/deserializer.ts","webpack://typedjson/./src/typedjson/serializer.ts","webpack://typedjson/./src/typedjson/json-object.ts","webpack://typedjson/./src/typedjson/json-member.ts","webpack://typedjson/./src/typedjson/json-array-member.ts","webpack://typedjson/./src/typedjson/json-set-member.ts","webpack://typedjson/./src/typedjson/json-map-member.ts","webpack://typedjson/./src/typedjson.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","METADATA_FIELD_KEY","isObject","parseToJSObject","json","JSON","parse","TypeError","isSubtypeOf","A","B","logError","message","optionalParams","_i","arguments","length","console","error","apply","concat","log","logWarning","warn","isValueDefined","isInstanceOf","constructor","Number","String","Boolean","isReflectMetadataSupported","Reflect","getMetadata","nameof","fn","metadata_JsonObjectMetadata","JsonObjectMetadata","classType","dataMembers","Map","knownTypes","Set","isExplicitlyMarked","getJsonObjectName","ctor","metadata","getFromConstructor","target","targetPrototype","getFromInstance","getPrototypeOf","getKnownTypeNameFromType","getKnownTypeNameFromInstance","injectMetadataInformation","propKey","objectMetadata","decoratorName","deserializer","parentMetadata","forEach","_metadata","_propKey","set","writable","add","keyType","elementType","elemCtor","deserializer_Deserializer","Deserializer","_typeResolver","sourceObject","__type","_errorHandler","setNameResolver","nameResolverCallback","_nameResolver","setTypeResolver","typeResolverCallback","setErrorHandler","errorHandlerCallback","convertAsObject","sourceObjectTypeInfo","objectName","_this","expectedSelfType","selfConstructor","sourceObjectMetadata","knownTypeConstructors","_mergeKnownTypes","_createKnownTypesMap","typeFromTypeHint","sourceMetadata_1","sourceObjectWithDeserializedProperties_1","memberMetadata","revivedValue","memberValue","memberNameForDebug","convertSingleValue","elementConstructor","keyConstructor","key","isRequired","targetObject","initializerCallback","e","_instantiateType","assign","onDeserializedMethodName","targetObject_1","keys","sourceKey","typeInfo","memberName","srcTypeNameForDebug","_isDirectlyDeserializableNativeType","_makeTypeErrorMessage","Date","_throwTypeMismatchError","Float32Array","Array","every","elem","isNaN","Float64Array","Uint8Array","map","Uint8ClampedArray","Uint16Array","Uint32Array","ArrayBuffer","_stringToArrayBuffer","DataView","_stringToDataView","convertAsArray","convertAsSet","convertAsMap","elementTypeInfo","slice","element","resultSet","keyTypeInfo","valueTypeInfo","resultMap","targetType","expectedSourceType","actualSourceType","expectedType","actualType","knownTypeMaps","result","knowTypes","knownTypeMeta","name_1","indexOf","convertNativeObject","str","buf","bufView","strLen","charCodeAt","serializer_Serializer","Serializer","_typeHintEmitter","sourceTypeMetadata","setTypeHintEmitter","typeEmitterCallback","selfType","_isDirectlySerializableNativeType","convertAsArrayBuffer","convertAsDataView","isArrayTypeInfo","elementTypes","isSetTypeInfo","isMapTypeInfo","_isTypeTypedArray","convertAsTypedArray","expectedName","actualName","sourceMeta_1","serializer","__assign","expectedElementType","expectedTypeName","actualTypeName","typeInfoForElements","resultArray","resultElement","push","expectedKeyType","resultKeyValuePairObj","from","buffer","charCode","fromCharCode","join","dataView","Int8Array","Int16Array","Int32Array","jsonObject","optionsOrTarget","options","decorator","knownType","onDeserialized","initializer","knownTypeMethodName","filter","jsonMember","propCtor","isSpecialPropertyType","emitDefaultValue","toString","reflectPropCtor","jsonArrayMember","dimensions","undefined","elementCtor","fill","createArrayElementType","jsonSetMember","jsonMapMember","valueConstructor","typedjson_TypedJSON","TypedJSON","rootConstructor","settings","globalKnownTypes","indent","rootMetadata","nameResolver","errorHandler","config","_globalConfig","rootType","parseAsArray","parseAsSet","parseAsMap","valueType","toPlainJson","toPlainArray","toPlainSet","stringifyAsSet","toPlainMap","keyCtor","valueCtor","stringifyAsMap","stringify","stringifyAsArray","setGlobalConfig","typedjson_assign","replacer","typeResolver","typeHintEmitter","jsonObj","ktc","knownTypeCtor","_mapKnownTypes","elementConstructorArray","constructors"],"mappings":"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","file":"typedjson.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"typedjson\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"typedjson\"] = factory();\n\telse\n\t\troot[\"typedjson\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","declare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport const METADATA_FIELD_KEY = \"__typedJsonJsonObjectMetadataInformation__\";\n\nexport function getDefaultValue<T>(type: { new (): T }): T|undefined\n{\n    switch (type as any)\n    {\n        case Number:\n            return 0 as any;\n\n        case String:\n            return \"\" as any;\n\n        case Boolean:\n            return false as any;\n\n        case Array:\n            return [] as any;\n\n        default:\n            return undefined;\n    }\n}\n\nexport function isPrimitiveType(type: any): type is (typeof Number | typeof String | typeof Boolean)\n{\n    return (type === String || type === Boolean || type === Number);\n}\n\nexport function isPrimitiveValue(obj: any)\n{\n    switch (typeof obj)\n    {\n        case \"string\":\n        case \"number\":\n        case \"boolean\":\n            return true;\n        default:\n            return (obj instanceof String || obj instanceof Number || obj instanceof Boolean);\n    }\n}\n\nexport function isObject(value: any): value is Object\n{\n    return typeof value === \"object\";\n}\n\nexport function parseToJSObject(json: any): Object {\n    if (isObject(json)) {\n        return json;\n    }\n    json = JSON.parse(json);\n    if (!isObject(json)) {\n        throw new TypeError(\"TypedJSON can only parse JSON strings or plain JS objects\");\n    }\n    return json;\n}\n\n/**\n * Determines if 'A' is a sub-type of 'B' (or if 'A' equals 'B').\n * @param A The supposed derived type.\n * @param B The supposed base type.\n */\nexport function isSubtypeOf(A: Function, B: Function)\n{\n    return A === B || A.prototype instanceof B;\n}\n\nexport function logError(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.error === \"function\")\n    {\n        console.error.apply(console, [message].concat(optionalParams));\n    }\n    else if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log.apply(console, [\"ERROR: \" + message].concat(optionalParams));\n    }\n}\n\nexport function logMessage(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log.apply(console, [message].concat(optionalParams));\n    }\n}\n\nexport function logWarning(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.warn === \"function\")\n    {\n        console.warn.apply(console, [message].concat(optionalParams));\n    } else if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log.apply(console, [\"WARNING: \" + message].concat(optionalParams));\n    }\n}\n\n/**\n * Checks if the value is considered defined (not undefined and not null).\n * @param value\n */\nexport function isValueDefined<T>(value: T): value is Exclude<T, undefined | null>\n{\n    return !(typeof value === \"undefined\" || value === null);\n}\n\nexport function isInstanceOf<T>(value: any, constructor: Function): boolean\n{\n    if (typeof value === \"number\")\n    {\n        return (constructor === Number);\n    }\n    else if (typeof value === \"string\")\n    {\n        return (constructor === String);\n    }\n    else if (typeof value === \"boolean\")\n    {\n        return (constructor === Boolean);\n    }\n    else if (isObject(value))\n    {\n        return (value instanceof constructor);\n    }\n\n    return false;\n}\n\nexport const isReflectMetadataSupported =\n    (typeof Reflect === \"object\" && typeof Reflect.getMetadata === \"function\");\n\n/**\n * Gets the name of a function.\n * @param fn The function whose name to get.\n */\nexport function nameof(fn: Function & { name?: string })\n{\n    if (typeof fn.name === \"string\")\n    {\n        return fn.name;\n    }\n    else\n    {\n        return \"undefined\";\n    }\n}\n","import { nameof, logError, METADATA_FIELD_KEY } from \"./helpers\";\nimport { IndexedObject } from \"./types\";\n\nexport interface JsonMemberMetadata\n{\n    /** If set, a default value will be emitted for uninitialized members. */\n    emitDefaultValue?: boolean;\n\n    /** Member name as it appears in the serialized JSON. */\n    name: string;\n\n    /** Property or field key of the json member. */\n    key: string;\n\n    /** Constuctor (type) reference of the member. */\n    ctor?: Function;\n\n    /** If set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** If the json member is an array, map or set, sets member options of elements/values. Subsequent values define the types of nested arrays. */\n    elementType?: Function[];\n\n    /** If the json member is a map, sets member options of array keys. */\n    keyType?: Function;\n\n    /** Custom deserializer to use. */\n    deserializer?: (json: any) => any;\n\n    /** Custom serializer to use. */\n    serializer?: (value: any) => any;\n}\n\nexport class JsonObjectMetadata\n{\n    //#region Static\n    /**\n     * Gets the name of a class as it appears in a serialized JSON string.\n     * @param ctor The constructor of a class (with or without jsonObject).\n     */\n    public static getJsonObjectName(ctor: Function): string\n    {\n        const metadata = JsonObjectMetadata.getFromConstructor(ctor);\n        return metadata ? nameof(metadata.classType) : nameof(ctor);\n    }\n\n    /**\n     * Gets jsonObject metadata information from a class or its prototype.\n     * @param target The target class or prototype.\n     * @param allowInherited Whether to use inherited metadata information from base classes (if own metadata does not exist).\n     */\n    public static getFromConstructor(target: Object | Function): JsonObjectMetadata|undefined\n    {\n        const targetPrototype = (typeof target === \"function\") ? target.prototype : target;\n\n        if (!targetPrototype)\n        {\n            return;\n        }\n\n        let metadata: JsonObjectMetadata|undefined;\n        if (targetPrototype.hasOwnProperty(METADATA_FIELD_KEY))\n        {\n            // The class prototype contains own jsonObject metadata\n            metadata = targetPrototype[METADATA_FIELD_KEY];\n        }\n\n        // Ignore implicitly added jsonObject (through jsonMember)\n        if (metadata && metadata.isExplicitlyMarked)\n        {\n            return metadata;\n        }\n    }\n\n    /**\n     * Gets jsonObject metadata information from a class instance.\n     * @param target The target instance.\n     */\n    public static getFromInstance(target: any): JsonObjectMetadata|undefined\n    {\n        return JsonObjectMetadata.getFromConstructor(Object.getPrototypeOf(target));\n    }\n\n    /**\n     * Gets the known type name of a jsonObject class for type hint.\n     * @param target The target class.\n     */\n    public static getKnownTypeNameFromType(target: Function): string\n    {\n        var metadata = JsonObjectMetadata.getFromConstructor(target);\n        return metadata ? nameof(metadata.classType) : nameof(target);\n    }\n\n    /**\n     * Gets the known type name of a jsonObject instance for type hint.\n     * @param target The target instance.\n     */\n    public static getKnownTypeNameFromInstance(target: any): string\n    {\n        var metadata = JsonObjectMetadata.getFromInstance(target);\n        return metadata ? nameof(metadata.classType) : nameof(target.constructor);\n    }\n    //#endregion\n\n    constructor(\n        classType: Function,\n    ) {\n        this.classType = classType;\n    }\n\n    public dataMembers: Map<string, JsonMemberMetadata> = new Map<string, JsonMemberMetadata>();\n\n    public knownTypes: Set<Function> = new Set<Function>();\n\n    public knownTypeMethodName?: string;\n\n    /** Gets or sets the constructor function for the jsonObject. */\n    public classType: Function;\n\n    /**\n     * Indicates whether this class was explicitly annotated with @jsonObject\n     * or implicitly by @jsonMember\n     */\n    public isExplicitlyMarked: boolean = false;\n\n    /** Name used to encode polymorphic type */\n    public name?: string;\n\n    public onDeserializedMethodName?: string;\n\n    public initializerCallback?: (sourceObject: Object, rawSourceObject: Object) => Object;\n}\n\nexport function injectMetadataInformation(target: IndexedObject, propKey: string | symbol, metadata: JsonMemberMetadata)\n{\n    const decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n    let objectMetadata: JsonObjectMetadata;\n\n    // When a property decorator is applied to a static member, 'target' is a constructor function.\n    // See: https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Decorators.md#property-decorators\n    // ... and static members are not supported here, so abort.\n    if (typeof target === \"function\")\n    {\n        logError(`${decoratorName}: cannot use a static property.`);\n        return;\n    }\n\n    // Methods cannot be serialized.\n    // @ts-ignore symbol indexing is not supported by ts\n    if (typeof target[propKey] === \"function\")\n    {\n        logError(`${decoratorName}: cannot use a method property.`);\n        return;\n    }\n\n    if (!metadata || (!metadata.ctor && !metadata.deserializer))\n    {\n        logError(`${decoratorName}: JsonMemberMetadata has unknown ctor.`);\n        return;\n    }\n\n    // Add jsonObject metadata to 'target' if not yet exists ('target' is the prototype).\n    // NOTE: this will not fire up custom serialization, as 'target' must be explicitly marked with '@jsonObject' as well.\n    if (!target.hasOwnProperty(METADATA_FIELD_KEY))\n    {\n        // No *own* metadata, create new.\n        objectMetadata = new JsonObjectMetadata(target.constructor);\n\n        // Inherit @JsonMembers from parent @jsonObject (if any).\n        const parentMetadata: JsonObjectMetadata = target[METADATA_FIELD_KEY];\n        if (parentMetadata) // && !target.hasOwnProperty(Helpers.METADATA_FIELD_KEY)\n        {\n            parentMetadata.dataMembers.forEach((_metadata, _propKey) => objectMetadata.dataMembers.set(_propKey, _metadata));\n        }\n\n        // ('target' is the prototype of the involved class, metadata information is added to this class prototype).\n        Object.defineProperty(target, METADATA_FIELD_KEY, {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: objectMetadata\n        });\n    }\n    else\n    {\n        // JsonObjectMetadata already exists on 'target'.\n        objectMetadata = target[METADATA_FIELD_KEY];\n    }\n\n    if (!metadata.deserializer)\n    {\n        // @ts-ignore above is a check (!deser && !ctor)\n        objectMetadata.knownTypes.add(metadata.ctor);\n    }\n\n    if (metadata.keyType)\n        objectMetadata.knownTypes.add(metadata.keyType);\n\n    if (metadata.elementType)\n        metadata.elementType.forEach(elemCtor => objectMetadata.knownTypes.add(elemCtor));\n\n    objectMetadata.dataMembers.set(metadata.name, metadata);\n}\n","import { nameof, logError, isSubtypeOf, isValueDefined } from \"./helpers\";\nimport { IndexedObject } from \"./types\";\nimport { JsonObjectMetadata } from \"./metadata\";\n\nexport interface IScopeTypeInfo\n{\n    selfConstructor: Function;\n    elementConstructor?: Function[];\n    keyConstructor?: Function;\n    knownTypes: Map<string, Function>;\n}\n\n/**\n * Utility class, converts a simple/untyped javascript object-tree to a typed object-tree.\n * It is used after parsing a JSON-string.\n */\nexport class Deserializer<T>\n{\n    private _typeResolver: (sourceObject: Object, knownTypes: Map<string, Function>) => Function|undefined;\n    private _nameResolver?: (ctor: Function) => string;\n    private _errorHandler: (error: Error) => void;\n\n    constructor()\n    {\n        this._typeResolver = (sourceObject: any, knownTypes: Map<string, Function>) =>\n        {\n            if (sourceObject.__type) return knownTypes.get(sourceObject.__type);\n        };\n\n        this._errorHandler = (error) => logError(error);\n    }\n\n    public setNameResolver(nameResolverCallback: (ctor: Function) => string)\n    {\n        this._nameResolver = nameResolverCallback;\n    }\n\n    public setTypeResolver(typeResolverCallback: (sourceObject: Object, knownTypes: Map<string, Function>) => Function)\n    {\n        if (typeof typeResolverCallback !== \"function\") throw new TypeError(\"'typeResolverCallback' is not a function.\");\n\n        this._typeResolver = typeResolverCallback;\n    }\n\n    public setErrorHandler(errorHandlerCallback: (error: Error) => void)\n    {\n        if (typeof errorHandlerCallback !== \"function\")\n        {\n            throw new TypeError(\"'errorHandlerCallback' is not a function.\");\n        }\n\n        this._errorHandler = errorHandlerCallback;\n    }\n\n    public convertAsObject(\n        sourceObject: IndexedObject,\n        sourceObjectTypeInfo: IScopeTypeInfo,\n        objectName = \"object\",\n    ) {\n        if (typeof sourceObject !== \"object\" || sourceObject === null)\n        {\n            this._errorHandler(new TypeError(`Cannot deserialize ${objectName}: 'sourceObject' must be a defined object.`));\n            return undefined;\n        }\n\n        let expectedSelfType = sourceObjectTypeInfo.selfConstructor;\n        let sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(expectedSelfType);\n        let knownTypeConstructors = sourceObjectTypeInfo.knownTypes;\n\n        if (sourceObjectMetadata)\n        {\n            // Merge known types received from \"above\" with known types defined on the current type.\n            knownTypeConstructors = this._mergeKnownTypes(\n                knownTypeConstructors,\n                this._createKnownTypesMap(sourceObjectMetadata.knownTypes),\n            );\n        }\n\n        // Check if a type-hint is available from the source object.\n        let typeFromTypeHint = this._typeResolver(sourceObject, knownTypeConstructors);\n\n        if (typeFromTypeHint)\n        {\n            // Check if type hint is a valid subtype of the expected source type.\n            if (isSubtypeOf(typeFromTypeHint, expectedSelfType))\n            {\n                // Hell yes.\n                expectedSelfType = typeFromTypeHint;\n                sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(typeFromTypeHint);\n\n                if (sourceObjectMetadata)\n                {\n                    // Also merge new known types from subtype.\n                    knownTypeConstructors = this._mergeKnownTypes(\n                        knownTypeConstructors,\n                        this._createKnownTypesMap(sourceObjectMetadata.knownTypes),\n                    );\n                }\n            }\n        }\n\n        if (sourceObjectMetadata && sourceObjectMetadata.isExplicitlyMarked)\n        {\n            const sourceMetadata = sourceObjectMetadata;\n            // Strong-typed deserialization available, get to it.\n            // First deserialize properties into a temporary object.\n            const sourceObjectWithDeserializedProperties = {} as IndexedObject;\n\n            // Deserialize by expected properties.\n            sourceMetadata.dataMembers.forEach((memberMetadata, propKey) =>\n            {\n                const memberValue = sourceObject[propKey];\n                const memberNameForDebug = `${nameof(sourceMetadata.classType)}.${propKey}`;\n\n                let revivedValue;\n                if (memberMetadata.deserializer) {\n                    revivedValue = memberMetadata.deserializer(memberValue);\n                } else if (memberMetadata.ctor) {\n                    revivedValue = this.convertSingleValue(\n                        memberValue,\n                        {\n                            selfConstructor: memberMetadata.ctor,\n                            elementConstructor: memberMetadata.elementType,\n                            keyConstructor: memberMetadata.keyType,\n                            knownTypes: knownTypeConstructors\n                        },\n                        memberNameForDebug,\n                    );\n                } else {\n                    throw new TypeError(\n                        `Cannot deserialize ${memberNameForDebug} thers is`\n                        + ` no constructor nor deserlization function to use.`,\n                    );\n                }\n\n                if (isValueDefined(revivedValue))\n                {\n                    sourceObjectWithDeserializedProperties[memberMetadata.key] = revivedValue;\n                }\n                else if (memberMetadata.isRequired)\n                {\n                    this._errorHandler(new TypeError(`Missing required member '${memberNameForDebug}'.`));\n                }\n            });\n\n            // Next, instantiate target object.\n            let targetObject: IndexedObject;\n\n            if (typeof sourceObjectMetadata.initializerCallback === \"function\")\n            {\n                try\n                {\n                    targetObject = sourceObjectMetadata.initializerCallback(\n                        sourceObjectWithDeserializedProperties,\n                        sourceObject,\n                    );\n\n                    // Check the validity of user-defined initializer callback.\n                    if (!targetObject)\n                    {\n                        throw new TypeError(\n                            `Cannot deserialize ${objectName}:`\n                            + ` 'initializer' function returned undefined/null`\n                            + `, but '${nameof(sourceObjectMetadata.classType)}' was expected.`,\n                        );\n                    }\n                    else if (!(targetObject instanceof sourceObjectMetadata.classType))\n                    {\n                        throw new TypeError(\n                            `Cannot deserialize ${objectName}:`\n                            + `'initializer' returned '${nameof(targetObject.constructor)}'`\n                            + `, but '${nameof(sourceObjectMetadata.classType)}' was expected,`\n                            + `and '${nameof(targetObject.constructor)}' is not a subtype of`\n                            + ` '${nameof(sourceObjectMetadata.classType)}'`,\n                        );\n                    }\n                }\n                catch (e)\n                {\n                    this._errorHandler(e);\n                    return undefined;\n                }\n            }\n            else\n            {\n                targetObject = this._instantiateType(expectedSelfType);\n            }\n\n            // Finally, assign deserialized properties to target object.\n            Object.assign(targetObject, sourceObjectWithDeserializedProperties);\n\n            // Call onDeserialized method (if any).\n            if (sourceObjectMetadata.onDeserializedMethodName)\n            {\n                if (typeof (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName] === \"function\")\n                {\n                    (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName]();\n                }\n                else\n                {\n                    this._errorHandler(new TypeError(\n                        `onDeserialized callback '${nameof(sourceObjectMetadata.classType)}.${sourceObjectMetadata.onDeserializedMethodName}' is not a method.`\n                    ));\n                }\n            }\n\n            return targetObject;\n        }\n        else\n        {\n            // Untyped deserialization into Object instance.\n            let targetObject = {} as IndexedObject;\n\n            Object.keys(sourceObject).forEach(sourceKey =>\n            {\n                targetObject[sourceKey] = this.convertSingleValue(sourceObject[sourceKey], {\n                    selfConstructor: sourceObject[sourceKey].constructor,\n                    knownTypes: sourceObjectTypeInfo.knownTypes,\n                    elementConstructor: sourceObjectTypeInfo.elementConstructor,\n                    keyConstructor: sourceObjectTypeInfo.keyConstructor\n                }, sourceKey);\n            });\n\n            return targetObject;\n        }\n    }\n\n    public convertSingleValue(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\")\n    {\n        let expectedSelfType = typeInfo.selfConstructor;\n        let srcTypeNameForDebug = sourceObject ? nameof(sourceObject.constructor) : \"undefined\";\n\n        if (!isValueDefined(sourceObject))\n        {\n            return sourceObject;\n        }\n        else if (this._isDirectlyDeserializableNativeType(expectedSelfType))\n        {\n            if (sourceObject.constructor === expectedSelfType)\n            {\n                return sourceObject;\n            }\n            else\n            {\n                throw new TypeError(this._makeTypeErrorMessage(nameof(expectedSelfType), sourceObject.constructor, memberName));\n            }\n        }\n        else if (expectedSelfType === Date)\n        {\n            // Support for Date with ISO 8601 format, or with numeric timestamp (milliseconds elapsed since the Epoch).\n            // ISO 8601 spec.: https://www.w3.org/TR/NOTE-datetime\n\n            if (typeof sourceObject === \"string\" || (typeof sourceObject === \"number\" && sourceObject > 0))\n                return new Date(sourceObject as any);\n            else\n                this._throwTypeMismatchError(\"Date\", \"an ISO-8601 string\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Float32Array)\n        {\n            // Deserialize Float32Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Float32Array(sourceObject);\n            else\n                this._throwTypeMismatchError(\"Float32Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Float64Array)\n        {\n            // Deserialize Float64Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Float64Array(sourceObject);\n            else\n                this._throwTypeMismatchError(\"Float64Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint8Array)\n        {\n            // Deserialize Uint8Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint8Array(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint8Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint8ClampedArray)\n        {\n            // Deserialize Uint8Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint8ClampedArray(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint8ClampedArray\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint16Array)\n        {\n            // Deserialize Uint16Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint16Array(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint16Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint32Array)\n        {\n            // Deserialize Uint32Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint32Array(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint32Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === ArrayBuffer)\n        {\n            if (typeof sourceObject === \"string\")\n                return this._stringToArrayBuffer(sourceObject);\n            else\n                this._throwTypeMismatchError(\"ArrayBuffer\", \"a string source\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === DataView)\n        {\n            if (typeof sourceObject === \"string\")\n                return this._stringToDataView(sourceObject);\n            else\n                this._throwTypeMismatchError(\"DataView\", \"a string source\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Array)\n        {\n            if (sourceObject instanceof Array)\n                return this.convertAsArray(sourceObject, typeInfo, memberName);\n            else\n                throw new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName));\n        }\n        else if (expectedSelfType === Set)\n        {\n            if (sourceObject instanceof Array)\n                return this.convertAsSet(sourceObject, typeInfo, memberName);\n            else\n                this._throwTypeMismatchError(\"Set\", \"Array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Map)\n        {\n            if (sourceObject instanceof Array)\n                return this.convertAsMap(sourceObject, typeInfo, memberName);\n            else\n                this._throwTypeMismatchError(\"Map\", \"a source array of key-value-pair objects\", srcTypeNameForDebug, memberName);\n        }\n        else if (sourceObject && typeof sourceObject === \"object\")\n        {\n            return this.convertAsObject(sourceObject, typeInfo, memberName);\n        }\n    }\n\n    public convertAsArray(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\"): any[]\n    {\n        if (!(sourceObject instanceof Array))\n        {\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n            return [];\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Array: missing constructor reference of Array elements.`));\n            return [];\n        }\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n\n        return sourceObject.map(element =>\n        {\n            // If an array element fails to deserialize, substitute with undefined. This is so that the original ordering is not interrupted by faulty\n            // entries, as an Array is ordered.\n            try\n            {\n                return this.convertSingleValue(element, elementTypeInfo);\n            }\n            catch (e)\n            {\n                this._errorHandler(e);\n\n                // Keep filling the array here with undefined to keep original ordering.\n                // Note: this is just aesthetics, not returning anything produces the same result.\n                return undefined;\n            }\n        });\n    }\n\n    public convertAsSet(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\")\n    {\n        if (!(sourceObject instanceof Array))\n        {\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n            return new Set<any>();\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Set: missing constructor reference of Set elements.`));\n            return new Set<any>();\n        }\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n        let resultSet = new Set<any>();\n\n        sourceObject.forEach((element, i) =>\n        {\n            try\n            {\n                resultSet.add(this.convertSingleValue(element, elementTypeInfo, memberName + `[${i}]`));\n            }\n            catch (e)\n            {\n                // Faulty entries are skipped, because a Set is not ordered, and skipping an entry does not affect others.\n                this._errorHandler(e);\n            }\n        });\n\n        return resultSet;\n    }\n\n    public convertAsMap(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\")\n    {\n        if (!(sourceObject instanceof Array))\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n\n        if (!typeInfo.keyConstructor)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Map: missing key constructor.`));\n            return new Map<any, any>();\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Map: missing value constructor.`));\n            return new Map<any, any>();\n        }\n\n        let keyTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.keyConstructor,\n            knownTypes: typeInfo.knownTypes\n        };\n\n        let valueTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n\n        let resultMap = new Map<any, any>();\n\n        sourceObject.forEach((element: any) =>\n        {\n            try\n            {\n                let key = this.convertSingleValue(element.key, keyTypeInfo);\n\n                // Undefined/null keys not supported, skip if so.\n                if (isValueDefined(key))\n                {\n                    resultMap.set(key, this.convertSingleValue(\n                        element.value, valueTypeInfo, `${memberName}[${key}]`,\n                    ));\n                }\n            }\n            catch (e)\n            {\n                // Faulty entries are skipped, because a Map is not ordered,\n                // and skipping an entry does not affect others.\n                this._errorHandler(e);\n            }\n        });\n\n        return resultMap;\n    }\n\n    private _throwTypeMismatchError(\n        targetType: string,\n        expectedSourceType: string,\n        actualSourceType: string,\n        memberName: string = \"object\",\n    ) {\n        throw new TypeError(\n            `Could not deserialize ${memberName} as ${targetType}:`\n            + ` expected ${expectedSourceType}, got ${actualSourceType}.`,\n        );\n    }\n\n    private _makeTypeErrorMessage(expectedType: Function | string, actualType: Function | string, memberName = \"object\")\n    {\n        let expectedTypeName = (typeof expectedType === \"function\") ? nameof(expectedType) : expectedType;\n        let actualTypeName = (typeof actualType === \"function\") ? nameof(actualType) : actualType;\n\n        return `Could not deserialize ${memberName}: expected '${expectedTypeName}', got '${actualTypeName}'.`;\n    }\n\n    private _instantiateType(ctor: any)\n    {\n        return new ctor();\n    }\n\n    private _mergeKnownTypes(...knownTypeMaps: Array<Map<string, Function>>)\n    {\n        let result = new Map<string, Function>();\n\n        knownTypeMaps.forEach(knownTypes =>\n        {\n            knownTypes.forEach((ctor, name) =>\n            {\n                if (this._nameResolver)\n                {\n                    result.set(this._nameResolver(ctor), ctor);\n                }\n                else\n                {\n                    result.set(name, ctor);\n                }\n            });\n        });\n\n        return result;\n    }\n\n    private _createKnownTypesMap(knowTypes: Set<Function>)\n    {\n        const map = new Map<string, Function>();\n\n        knowTypes.forEach(ctor =>\n        {\n            if (this._nameResolver)\n            {\n                map.set(this._nameResolver(ctor), ctor);\n            }\n            else\n            {\n                const knownTypeMeta = JsonObjectMetadata.getFromConstructor(ctor);\n                const name = knownTypeMeta && knownTypeMeta.isExplicitlyMarked && knownTypeMeta.name\n                    ? knownTypeMeta.name\n                    : ctor.name;\n                map.set(name, ctor);\n            }\n        });\n\n        return map;\n    }\n\n    private _isDirectlyDeserializableNativeType(ctor: any)\n    {\n        return ~([Number, String, Boolean].indexOf(ctor));\n    }\n\n    public convertNativeObject(sourceObject: any)\n    {\n        return sourceObject;\n    }\n\n    private _stringToArrayBuffer(str: string)\n    {\n        let buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        let bufView = new Uint16Array(buf);\n\n        for (let i = 0, strLen = str.length; i < strLen; i++)\n        {\n            bufView[i] = str.charCodeAt(i);\n        }\n\n        return buf;\n    }\n\n    private _stringToDataView(str: string)\n    {\n        return new DataView(this._stringToArrayBuffer(str));\n    }\n}\n","import { nameof, logError, isValueDefined, isInstanceOf } from \"./helpers\";\nimport { IndexedObject } from \"./types\";\nimport { JsonObjectMetadata } from \"./metadata\";\n\nexport interface IScopeTypeInfo\n{\n    selfType: Function;\n    elementTypes?: Function[];\n    keyType?: Function;\n}\n\nexport interface IScopeArrayTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Array<any>;\n    elementTypes: Function[];\n}\n\nfunction isArrayTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeArrayTypeInfo {\n    return typeInfo.selfType === Array;\n}\n\nexport interface IScopeSetTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Set<any>;\n    elementTypes: [Function];\n}\n\nfunction isSetTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeSetTypeInfo {\n    return typeInfo.selfType === Set;\n}\n\nexport interface IScopeMapTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Map<any, any>;\n    elementTypes: [Function];\n    keyType: Function;\n}\n\nfunction isMapTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeMapTypeInfo {\n    return typeInfo.selfType === Map;\n}\n\n/**\n * Utility class, converts a typed object tree (i.e. a tree of class instances, arrays of class instances, and so on) to an untyped javascript object (also\n * called \"simple javascript object\"), and emits any necessary type hints in the process (for polymorphism).\n *\n * The converted object tree is what will be given to `JSON.stringify` to convert to string as the last step, the serialization is basically like:\n *\n * (1) typed object-tree -> (2) simple JS object-tree -> (3) JSON-string\n */\nexport class Serializer\n{\n    private _typeHintEmitter: (targetObject: IndexedObject, sourceObject: IndexedObject, expectedSourceType: Function, sourceTypeMetadata?: JsonObjectMetadata) => void;\n    private _errorHandler: (error: Error) => void;\n\n    constructor()\n    {\n        this._typeHintEmitter = (targetObject, sourceObject, expectedSourceType, sourceTypeMetadata?: JsonObjectMetadata) =>\n        {\n            // By default, we put a \"__type\" property on the output object if the actual object is not the same as the expected one, so that deserialization\n            // will know what to deserialize into (given the required known-types are defined, and the object is a valid subtype of the expected type).\n            if (sourceObject.constructor !== expectedSourceType)\n            {\n                const name = sourceTypeMetadata && sourceTypeMetadata.name\n                    ? sourceTypeMetadata.name\n                    : nameof(sourceObject.constructor);\n                // TODO: Perhaps this can work correctly without string-literal access?\n                // tslint:disable-next-line:no-string-literal\n                targetObject[\"__type\"] = name;\n            }\n        };\n\n        this._errorHandler = (error) => logError(error);\n    }\n\n    public setTypeHintEmitter(typeEmitterCallback: (targetObject: Object, sourceObject: Object, expectedSourceType: Function) => void)\n    {\n        if (typeof typeEmitterCallback !== \"function\")\n        {\n            throw new TypeError(\"'typeEmitterCallback' is not a function.\");\n        }\n\n        this._typeHintEmitter = typeEmitterCallback;\n    }\n\n    public setErrorHandler(errorHandlerCallback: (error: Error) => void)\n    {\n        if (typeof errorHandlerCallback !== \"function\")\n        {\n            throw new TypeError(\"'errorHandlerCallback' is not a function.\");\n        }\n\n        this._errorHandler = errorHandlerCallback;\n    }\n\n    /**\n     * Convert a value of any supported serializable type.\n     * The value type will be detected, and the correct serialization method will be called.\n     */\n    public convertSingleValue(sourceObject: any, typeInfo: IScopeTypeInfo, memberName: string = \"object\"): any\n    {\n        if (!isValueDefined(sourceObject)) return;\n\n        if (!isInstanceOf(sourceObject, typeInfo.selfType))\n        {\n            let expectedName = nameof(typeInfo.selfType);\n            let actualName = nameof(sourceObject.constructor);\n\n            this._errorHandler(new TypeError(`Could not serialize '${memberName}': expected '${expectedName}', got '${actualName}'.`));\n            return;\n        }\n\n        if (this._isDirectlySerializableNativeType(typeInfo.selfType))\n        {\n            return sourceObject;\n        }\n        else if (typeInfo.selfType === ArrayBuffer)\n        {\n            return this.convertAsArrayBuffer(sourceObject);\n        }\n        else if (typeInfo.selfType === DataView)\n        {\n            return this.convertAsDataView(sourceObject);\n        }\n        else if (isArrayTypeInfo(typeInfo))\n        {\n            return this.convertAsArray(sourceObject, typeInfo.elementTypes, memberName);\n        }\n        else if (isSetTypeInfo(typeInfo))\n        {\n            return this.convertAsSet(sourceObject, typeInfo.elementTypes[0], memberName);\n        }\n        else if (isMapTypeInfo(typeInfo))\n        {\n            return this.convertAsMap(sourceObject, typeInfo.keyType, typeInfo.elementTypes[0], memberName);\n        }\n        else if (this._isTypeTypedArray(typeInfo.selfType))\n        {\n            return this.convertAsTypedArray(sourceObject);\n        }\n        else if (typeof sourceObject === \"object\")\n        {\n            return this.convertAsObject(sourceObject, typeInfo, memberName);\n        }\n    }\n\n    /**\n     * Performs the conversion of a typed object (usually a class instance) to a simple javascript object for serialization.\n     */\n    public convertAsObject(sourceObject: IndexedObject, typeInfo: IScopeTypeInfo, memberName?: string)\n    {\n        let sourceTypeMetadata: JsonObjectMetadata|undefined;\n        let targetObject: IndexedObject;\n\n        if (sourceObject.constructor !== typeInfo.selfType && sourceObject instanceof typeInfo.selfType)\n        {\n            // The source object is not of the expected type, but it is a valid subtype.\n            // This is OK, and we'll proceed to gather object metadata from the subtype instead.\n            sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(sourceObject.constructor);\n        }\n        else\n        {\n            sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(typeInfo.selfType);\n        }\n\n        if (sourceTypeMetadata)\n        {\n            const sourceMeta = sourceTypeMetadata;\n            // Strong-typed serialization available.\n            // We'll serialize by members that have been marked with @jsonMember (including array/set/map members), and perform recursive conversion on\n            // each of them. The converted objects are put on the 'targetObject', which is what will be put into 'JSON.stringify' finally.\n            targetObject = {};\n\n            sourceTypeMetadata.dataMembers.forEach((memberMetadata) =>\n            {\n                if (memberMetadata.serializer) {\n                    targetObject[memberMetadata.name] =\n                        memberMetadata.serializer(sourceObject[memberMetadata.key]);\n                } else if (memberMetadata.ctor) {\n                    targetObject[memberMetadata.name] = this.convertSingleValue(\n                        sourceObject[memberMetadata.key],\n                        {\n                            selfType: memberMetadata.ctor,\n                            elementTypes: memberMetadata.elementType,\n                            keyType: memberMetadata.keyType,\n                        },\n                        `${nameof(sourceMeta.classType)}.${memberMetadata.key}`,\n                    );\n                } else {\n                    throw new TypeError(\n                        `Could not serialize ${memberMetadata.name}, there is`\n                        + ` no constructor nor serialization function to use.`,\n                    );\n                }\n            });\n        }\n        else\n        {\n            // Untyped serialization, \"as-is\", we'll just pass the object on.\n            // We'll clone the source object, because type hints are added to the object itself, and we don't want to modify to the original object.\n            targetObject = { ...sourceObject };\n        }\n\n        // Add type-hint.\n        this._typeHintEmitter(targetObject, sourceObject, typeInfo.selfType, sourceTypeMetadata);\n\n        return targetObject;\n    }\n\n    /**\n     * Performs the conversion of an array of typed objects (or primitive values) to an array of simple javascript objects (or primitive values) for\n     * serialization.\n     * @param expectedElementType The expected type of elements. If the array is supposed to be multi-dimensional, subsequent elements define lower dimensions.\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     */\n    public convertAsArray(sourceObject: any[], expectedElementType: Function[], memberName = \"object\"): any[]\n    {\n        if (expectedElementType.length === 0 || !expectedElementType[0])\n           throw new TypeError(`Could not serialize ${memberName} as Array: missing element type definition.`);\n\n        // Check the type of each element, individually.\n        // If at least one array element type is incorrect, we return undefined, which results in no value emitted during serialization.\n        // This is so that invalid element types don't unexpectedly alter the ordering of other, valid elements, and that no unexpected undefined values are in\n        // the emitted array.\n        sourceObject.forEach((element, i) =>\n        {\n            if (!isInstanceOf(element, expectedElementType[0]))\n            {\n                const expectedTypeName = nameof(expectedElementType[0]);\n                const actualTypeName = nameof(element.constructor);\n                throw new TypeError(`Could not serialize ${memberName}[${i}]: expected '${expectedTypeName}', got '${actualTypeName}'.`);\n            }\n        });\n\n        const typeInfoForElements: IScopeTypeInfo = {\n            selfType: expectedElementType[0],\n            elementTypes: expectedElementType.length > 1 ? expectedElementType.slice(1) : [], // For multidimensional arrays.\n        };\n\n        if (memberName)\n        {\n            // Just for debugging purposes.\n            memberName += \"[]\";\n        }\n\n        return sourceObject.map(element => this.convertSingleValue(element, typeInfoForElements, memberName));\n    }\n\n    /**\n     * Performs the conversion of a set of typed objects (or primitive values) into an array of simple javascript objects.\n     *\n     * @param sourceObject\n     * @param expectedElementType The constructor of the expected Set elements (e.g. `Number` for `Set<number>`, or `MyClass` for `Set<MyClass>`).\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     * @returns\n     */\n    public convertAsSet(sourceObject: Set<any>, expectedElementType: Function, memberName = \"object\"): any[]\n    {\n        if (!expectedElementType)\n            throw new TypeError(`Could not serialize ${memberName} as Set: missing element type definition.`);\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfType: expectedElementType,\n        };\n\n        // For debugging and error tracking.\n        if (memberName) memberName += \"[]\";\n\n        let resultArray: any[] = [];\n\n        // Convert each element of the set, and put it into an output array.\n        // The output array is the one serialized, as JSON.stringify does not support Set serialization. (TODO: clarification needed)\n        sourceObject.forEach(element =>\n        {\n            let resultElement = this.convertSingleValue(element, elementTypeInfo, memberName);\n\n            // Add to output if the source element was undefined, OR the converted element is defined. This will add intentionally undefined values to output,\n            // but not values that became undefined DURING serializing (usually because of a type-error).\n            if (!isValueDefined(element) || isValueDefined(resultElement))\n            {\n                resultArray.push(resultElement);\n            }\n        });\n\n        return resultArray;\n    }\n\n    /**\n     * Performs the conversion of a map of typed objects (or primitive values) into an array of simple javascript objects with `key` and `value` properties.\n     *\n     * @param sourceObject\n     * @param expectedKeyType The constructor of the expected Map keys (e.g. `Number` for `Map<number, any>`, or `MyClass` for `Map<MyClass, any>`).\n     * @param expectedElementType The constructor of the expected Map values (e.g. `Number` for `Map<any, number>`, or `MyClass` for `Map<any, MyClass>`).\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     */\n    public convertAsMap(sourceObject: Map<any, any>, expectedKeyType: Function, expectedElementType: Function, memberName = \"object\"): Array<{ key: any, value: any }>\n    {\n        if (!expectedElementType)\n            throw new TypeError(`Could not serialize ${memberName} as Map: missing value type definition.`);\n\n        if (!expectedKeyType)\n            throw new TypeError(`Could not serialize ${memberName} as Map: missing key type definition.`);\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfType: expectedElementType,\n            elementTypes: [expectedElementType]\n        };\n\n        let keyTypeInfo: IScopeTypeInfo = {\n            selfType: expectedKeyType\n        };\n\n        if (memberName) memberName += \"[]\";\n\n        let resultArray: Array<{ key: any, value: any }> = [];\n\n        // Convert each *entry* in the map to a simple javascript object with key and value properties.\n        sourceObject.forEach((value, key) =>\n        {\n            let resultKeyValuePairObj = {\n                key: this.convertSingleValue(key, keyTypeInfo, memberName),\n                value: this.convertSingleValue(value, elementTypeInfo, memberName)\n            };\n\n            // We are not going to emit entries with undefined keys OR undefined values.\n            if (isValueDefined(resultKeyValuePairObj.key) && isValueDefined(resultKeyValuePairObj.value))\n            {\n                resultArray.push(resultKeyValuePairObj);\n            }\n        });\n\n        return resultArray;\n    }\n\n    /**\n     * Performs the conversion of a typed javascript array to a simple untyped javascript array.\n     * This is needed because typed arrays are otherwise serialized as objects, so we'll end up with something like \"{ 0: 0, 1: 1, ... }\".\n     *\n     * @param sourceObject\n     * @returns\n     */\n    public convertAsTypedArray(sourceObject: ArrayBufferView)\n    {\n        return Array.from(sourceObject as any);\n    }\n\n    /**\n     * Performs the conversion of a raw ArrayBuffer to a string.\n     */\n    public convertAsArrayBuffer(buffer: ArrayBuffer)\n    {\n        // ArrayBuffer -> 16-bit character codes -> character array -> joined string.\n        return Array.from(new Uint16Array(buffer)).map(charCode => String.fromCharCode(charCode)).join(\"\");\n    }\n\n    /**\n     * Performs the conversion of DataView, converting its internal ArrayBuffer to a string and returning that string.\n     */\n    public convertAsDataView(dataView: DataView)\n    {\n        return this.convertAsArrayBuffer(dataView.buffer);\n    }\n\n    /**\n     * Determines whether the specified type is a type that can be passed on \"as-is\" into `JSON.stringify`.\n     * Values of these types don't need special conversion.\n     * @param ctor The constructor of the type (wrapper constructor for primitive types, e.g. `Number` for `number`).\n     */\n    private _isDirectlySerializableNativeType(ctor: Function)\n    {\n        return ~[Date, Number, String, Boolean].indexOf(ctor as any);\n    }\n\n    private _isTypeTypedArray(ctor: Function)\n    {\n        return ~[Float32Array, Float64Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array].indexOf(ctor as any);\n    }\n}\n","import { Constructor, ParameterlessConstructor } from \"./types\";\nimport { METADATA_FIELD_KEY } from \"./helpers\";\nimport { JsonObjectMetadata } from \"./metadata\";\n\nexport interface IJsonObjectOptionsBase\n{\n    /**\n     * An array of known types to recognize when encountering type-hints,\n     * or the name of a static method used for determining known types.\n     */\n    knownTypes?: Function[] | string;\n\n    /**\n     * The name of a static or instance method to call when deserialization\n     * of the object is completed.\n     */\n    onDeserialized?: string;\n\n    /**\n     * The name used to differentiate between different polymorphic types.\n     */\n    name?: string;\n}\n\nexport interface IJsonObjectOptionsWithInitializer<T> extends IJsonObjectOptionsBase\n{\n    /**\n     * The name of a static method to call before deserializing and initializing the object, accepting two arguments: (1) sourceObject, an 'Object' instance\n     * with all properties already deserialized, and (2) rawSourceObject, a raw 'Object' instance representation of the current object in the serialized JSON\n     * (i.e. without deserialized properties).\n     */\n    initializer: (sourceObject: T, rawSourceObject: T) => T;\n}\n\nexport interface IJsonObjectOptions<T> extends IJsonObjectOptionsBase\n{\n    /**\n     * The name of a static method to call before deserializing and initializing the object, accepting two arguments: (1) sourceObject, an 'Object' instance\n     * with all properties already deserialized, and (2) rawSourceObject, a raw 'Object' instance representation of the current object in the serialized JSON\n     * (i.e. without deserialized properties).\n     */\n    initializer?: (sourceObject: T, rawSourceObject: T) => T;\n}\n\n/**\n * Marks that a class with a parameterized constructor is serializable using TypedJSON, with additional settings. The 'initializer' setting must be specified.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptionsWithInitializer<T>): (target: Constructor<T>) => void;\n\n/**\n * Marks that a class is serializable using TypedJSON, with additional settings.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptions<T>): (target: ParameterlessConstructor<T>) => void;\n\n/**\n * Marks that a class with a parameterless constructor is serializable using TypedJSON.\n */\nexport function jsonObject<T>(target: ParameterlessConstructor<T>): void;\n\nexport function jsonObject<T extends Object>(optionsOrTarget?: IJsonObjectOptions<T> | Constructor<T>\n): ((target: Constructor<T>) => void) | void {\n    let options: IJsonObjectOptions<T>;\n\n    if (typeof optionsOrTarget === \"function\")\n    {\n        // jsonObject is being used as a decorator, directly.\n        options = {};\n    }\n    else\n    {\n        // jsonObject is being used as a decorator factory.\n        options = optionsOrTarget || {};\n    }\n\n    function decorator(\n        target: Function\n    ): void {\n        let objectMetadata: JsonObjectMetadata;\n\n        // Create or obtain JsonObjectMetadata object.\n        if (!target.prototype.hasOwnProperty(METADATA_FIELD_KEY))\n        {\n            // Target has no JsonObjectMetadata associated with it yet, create it now.\n            objectMetadata = new JsonObjectMetadata(target);\n\n            // Inherit json members and known types from parent @jsonObject (if any).\n            const parentMetadata: JsonObjectMetadata = target.prototype[METADATA_FIELD_KEY];\n            if (parentMetadata)\n            {\n                parentMetadata.dataMembers\n                    .forEach((memberMetadata, propKey) =>\n                        objectMetadata.dataMembers.set(propKey, memberMetadata));\n                parentMetadata.knownTypes\n                    .forEach((knownType) => objectMetadata.knownTypes.add(knownType));\n            }\n\n            Object.defineProperty(target.prototype, METADATA_FIELD_KEY, {\n                enumerable: false,\n                configurable: false,\n                writable: false,\n                value: objectMetadata\n            });\n        }\n        else\n        {\n            // Target already has JsonObjectMetadata associated with it.\n            objectMetadata = target.prototype[METADATA_FIELD_KEY];\n            objectMetadata.classType = target;\n        }\n\n        // Fill JsonObjectMetadata.\n        objectMetadata.isExplicitlyMarked = true;\n        objectMetadata.onDeserializedMethodName = options.onDeserialized;\n        // T extend Object so it is fine\n        objectMetadata.initializerCallback = options.initializer as any;\n        if (options.name)\n        {\n            objectMetadata.name = options.name;\n        }\n\n        // Obtain known-types.\n        if (typeof options.knownTypes === \"string\")\n        {\n            objectMetadata.knownTypeMethodName = options.knownTypes;\n        }\n        else if (options.knownTypes instanceof Array)\n        {\n            options.knownTypes\n                .filter(knownType => !!knownType)\n                .forEach(knownType => objectMetadata.knownTypes.add(knownType));\n        }\n    }\n\n    if (typeof optionsOrTarget === \"function\")\n    {\n        // jsonObject is being used as a decorator, directly.\n        decorator(optionsOrTarget);\n    }\n    else\n    {\n        // jsonObject is being used as a decorator factory.\n        return decorator;\n    }\n}\n","import {\n    nameof, logError, isReflectMetadataSupported, isValueDefined, logWarning, isSubtypeOf\n} from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMemberOptions\n{\n    /**\n     * Sets the constructor of the property.\n     * Optional with ReflectDecorators.\n     */\n    constructor?: Function;\n\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted if the property is uninitialized/undefined. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name. */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property is part of the object when serializing, with additional options.\n * Omitting the 'constructor' option requires ReflectDecorators and that the property type is always explicitly declared.\n * @param options Additional options.\n */\nexport function jsonMember<TFunction extends Function>(options: IJsonMemberOptions): PropertyDecorator;\n\n/**\n * Specifies that a property is part of the object when serializing.\n * This call signature requires ReflectDecorators and that the property type is always explicitly declared.\n */\nexport function jsonMember(target: Object, propertyKey: string | symbol): void;\n\nexport function jsonMember<TFunction extends Function>(optionsOrTarget?: IJsonMemberOptions | Object, propKey?: string | symbol): PropertyDecorator | void\n{\n    if (optionsOrTarget instanceof Object && (typeof propKey === \"string\" || typeof propKey === \"symbol\"))\n    {\n        const target = optionsOrTarget;\n        // For error messages.\n        const decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(propKey)}`;\n\n        // jsonMember used directly, no additional information directly available besides target and propKey.\n        // Obtain property constructor through ReflectDecorators.\n        if (isReflectMetadataSupported)\n        {\n            const reflectPropCtor = Reflect.getMetadata(\"design:type\", target, propKey) as Function;\n\n            if (!reflectPropCtor)\n            {\n                logError(`${decoratorName}: could not resolve detected property constructor at runtime.`);\n                return;\n            }\n\n            if (isSpecialPropertyType(decoratorName, reflectPropCtor))\n            {\n                return;\n            }\n\n            injectMetadataInformation(target, propKey, {\n                ctor: reflectPropCtor,\n                key: propKey.toString(),\n                name: propKey.toString(),\n            });\n        }\n        else\n        {\n            logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n            return;\n        }\n    }\n    else\n    {\n        // jsonMember used as a decorator factory.\n        return (target: Object, _propKey: string | symbol) =>\n        {\n            let options: IJsonMemberOptions = optionsOrTarget || {};\n            let propCtor: Function|undefined;\n            let decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(_propKey)}`; // For error messages.\n\n            if (options.hasOwnProperty(\"constructor\"))\n            {\n                if (!isValueDefined(options.constructor))\n                {\n                    logError(`${decoratorName}: cannot resolve specified property constructor at runtime.`);\n                    return;\n                }\n\n                // Property constructor has been specified. Use ReflectDecorators (if available) to check whether that constructor is correct. Warn if not.\n                if (isReflectMetadataSupported && !isSubtypeOf(options.constructor, Reflect.getMetadata(\"design:type\", target, _propKey)))\n                {\n                    logWarning(`${decoratorName}: detected property type does not match 'constructor' option.`);\n                }\n\n                propCtor = options.constructor;\n            }\n            else\n            {\n                // Use ReflectDecorators to obtain property constructor.\n                if (isReflectMetadataSupported)\n                {\n                    propCtor = Reflect.getMetadata(\"design:type\", target, _propKey) as Function;\n\n                    if (!propCtor)\n                    {\n                        logError(`${decoratorName}: cannot resolve detected property constructor at runtime.`);\n                        return;\n                    }\n                }\n                else if (!options.deserializer)\n                {\n                    logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n                    return;\n                }\n            }\n\n            if (isSpecialPropertyType(decoratorName, propCtor))\n            {\n                return;\n            }\n\n            injectMetadataInformation(target, _propKey, {\n                ctor: propCtor,\n                emitDefaultValue: options.emitDefaultValue || false,\n                isRequired: options.isRequired || false,\n                key: _propKey.toString(),\n                name: options.name || _propKey.toString(),\n                deserializer: options.deserializer,\n                serializer: options.serializer,\n            });\n        };\n    }\n}\n\nfunction isSpecialPropertyType(decoratorName: string, propCtor?: Function)\n{\n    if (propCtor === Array)\n    {\n        logError(`${decoratorName}: property is an Array. Use the jsonArrayMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (propCtor === Set)\n    {\n        logError(`${decoratorName}: property is a Set. Use the jsonSetMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (propCtor === Map)\n    {\n        logError(`${decoratorName}: property is a Map. Use the jsonMapMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    return false;\n}\n","import { nameof, logError, isReflectMetadataSupported } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonArrayMemberOptions\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, an empty array is emitted if the property is undefined/uninitialized. */\n    emitDefaultValue?: boolean;\n\n    /** Sets array dimensions (e.g. 1 for 'number[]' or 2 for 'number[][]'). Defaults to 1. */\n    dimensions?: number;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property, of type array, is part of an object when serializing.\n * @param elementConstructor Constructor of array elements (e.g. 'Number' for 'number[]', or 'Date' for 'Date[]').\n * @param options Additional options.\n */\nexport function jsonArrayMember(elementConstructor: Function, options: IJsonArrayMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        let decoratorName = `@jsonArrayMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof elementConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of array elements at runtime.`);\n            return;\n        }\n\n        const dimensions = options.dimensions === undefined ? 1 : options.dimensions;\n        if (!isNaN(dimensions) && dimensions < 1)\n        {\n            logError(`${decoratorName}: 'dimensions' option must be at least 1.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonArrayMember' has been used on an array.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Array)\n        {\n            logError(`${decoratorName}: property is not an Array.`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Array,\n            elementType: createArrayElementType(elementConstructor, dimensions),\n            emitDefaultValue: options.emitDefaultValue || false,\n            isRequired: options.isRequired || false,\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n\nfunction createArrayElementType(elementCtor: Function, dimensions: number) {\n    const elementTypes = new Array(dimensions).fill(Array, 0, -1);\n    elementTypes[dimensions-1] = elementCtor;\n    return elementTypes;\n}\n","import { nameof } from \"./helpers\";\nimport { IJsonMemberOptions } from \"./json-member\";\nimport { JsonMemberMetadata, JsonObjectMetadata, injectMetadataInformation } from \"./metadata\";\nimport * as Helpers from \"./helpers\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonSetMemberOptions\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Set<T>.\n * @param elementConstructor Constructor of set elements (e.g. 'Number' for Set<number> or 'Date' for Set<Date>).\n * @param options Additional options.\n */\nexport function jsonSetMember(elementConstructor: Function, options: IJsonSetMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        var decoratorName = `@jsonSetMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof elementConstructor !== \"function\")\n        {\n            Helpers.logError(`${decoratorName}: could not resolve constructor of set elements at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonSetMember' has been used on a set. Warn if not.\n        if (Helpers.isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Set)\n        {\n            Helpers.logError(`${decoratorName}: property is not a Set.`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Set,\n            elementType: [elementConstructor],\n            emitDefaultValue: options.emitDefaultValue || false,\n            isRequired: options.isRequired || false,\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import { nameof, logError, isReflectMetadataSupported } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMapMemberOptions\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Map<K, V>.\n * @param keyConstructor Constructor of map keys (e.g. 'Number' for 'Map<number, Date>').\n * @param valueConstructor Constructor of map values (e.g. 'Date' for 'Map<number, Date>').\n * @param options Additional options.\n */\nexport function jsonMapMember(keyConstructor: Function, valueConstructor: Function, options: IJsonMapMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        let decoratorName = `@jsonMapMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof keyConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of map keys at runtime.`);\n            return;\n        }\n\n        if (typeof valueConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of map values at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonMapMember' has been used on a map. Warn if not.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Map)\n        {\n            logError(`${decoratorName}: property is not a Map.`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Map,\n            elementType: [valueConstructor],\n            keyType: keyConstructor,\n            emitDefaultValue: options.emitDefaultValue || false,\n            isRequired: options.isRequired || false,\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import { parseToJSObject } from './typedjson/helpers';\nimport { Constructor } from \"./typedjson/types\";\nimport * as Helpers from \"./typedjson/helpers\";\nimport { JsonObjectMetadata } from \"./typedjson/metadata\";\nimport { Deserializer } from \"./typedjson/deserializer\";\nimport { Serializer } from \"./typedjson/serializer\";\n\nexport interface ITypedJSONSettings\n{\n    /**\n     * Sets the handler callback to invoke on errors during serializing and deserializing.\n     * Re-throwing errors in this function will halt serialization/deserialization.\n     * The default behavior is to log errors to the console.\n     */\n    errorHandler?: (e: Error) => void;\n\n    /**\n     * Sets a callback that determines the constructor of the correct sub-type of polymorphic\n     * objects while deserializing.\n     * The default behavior is to read the type-name from the '__type' property of 'sourceObject',\n     * and look it up in 'knownTypes'.\n     * The constructor of the sub-type should be returned.\n     */\n    typeResolver?: (sourceObject: Object, knownTypes: Map<string, Function>) => Function;\n\n    nameResolver?: (ctor: Function) => string;\n\n    /**\n     * Sets a callback that writes type-hints to serialized objects.\n     * The default behavior is to write the type-name to the '__type' property, if a derived type\n     * is present in place of a base type.\n     */\n    typeHintEmitter?:\n        (targetObject: Object, sourceObject: Object, expectedSourceType: Function) => void;\n\n    /**\n     * Sets the amount of indentation to use in produced JSON strings.\n     * Default value is 0, or no indentation.\n     */\n    indent?: number;\n\n    replacer?: (key: string, value: any) => any;\n\n    knownTypes?: Array<Constructor<any>>;\n}\n\nexport class TypedJSON<T>\n{\n    //#region Static\n    public static parse<T>(\n        object: any, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): T|undefined {\n        return new TypedJSON(rootType, settings).parse(object);\n    }\n\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: 1\n    ): T[];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 2\n    ): T[][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 3\n    ): T[][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 4\n    ): T[][][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 5\n    ): T[][][][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: number\n    ): any[] {\n        return new TypedJSON(elementType, settings).parseAsArray(object, dimensions as any);\n    }\n\n    public static parseAsSet<T>(\n        object: any, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): Set<T> {\n        return new TypedJSON(elementType, settings).parseAsSet(object);\n    }\n\n    public static parseAsMap<K, V>(\n        object: any,\n        keyType: Constructor<K>,\n        valueType: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): Map<K, V> {\n        return new TypedJSON(valueType, settings).parseAsMap(object, keyType);\n    }\n\n    public static toPlainJson<T>(\n        object: T, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): Object|undefined {\n        return new TypedJSON(rootType, settings).toPlainJson(object);\n    }\n\n    public static toPlainArray<T>(\n        object: T[], elementType: Constructor<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): Object[];\n    public static toPlainArray<T>(\n        object: T[][], elementType: Constructor<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): Object[][];\n    public static toPlainArray<T>(\n        object: T[][][], elementType: Constructor<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): Object[][][];\n    public static toPlainArray<T>(\n        object: T[][][][], elementType: Constructor<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): Object[][][][];\n    public static toPlainArray<T>(\n        object: T[][][][][], elementType: Constructor<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): Object[][][][][];\n    public static toPlainArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): any[];\n    public static toPlainArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions?: any, settings?: ITypedJSONSettings,\n    ): any[] {\n        return new TypedJSON(elementType, settings).toPlainArray(object, dimensions);\n    }\n\n    public static toPlainSet<T>(\n        object: Set<T>, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsSet(object);\n    }\n\n    public static toPlainMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Constructor<K>,\n        valueCtor: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(valueCtor, settings).stringifyAsMap(object, keyCtor);\n    }\n\n    public static stringify<T>(\n        object: T, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(rootType, settings).stringify(object);\n    }\n\n    public static stringifyAsArray<T>(\n        object: T[], elementType: Constructor<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][], elementType: Constructor<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][], elementType: Constructor<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][][], elementType: Constructor<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][][][], elementType: Constructor<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions?: any, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsArray(object, dimensions);\n    }\n\n    public static stringifyAsSet<T>(\n        object: Set<T>, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsSet(object);\n    }\n\n    public static stringifyAsMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Constructor<K>,\n        valueCtor: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(valueCtor, settings).stringifyAsMap(object, keyCtor);\n    }\n\n    private static _globalConfig: ITypedJSONSettings;\n\n    public static setGlobalConfig(config: ITypedJSONSettings)\n    {\n        if (this._globalConfig)\n        {\n            Object.assign(this._globalConfig, config);\n        }\n        else\n        {\n            this._globalConfig = config;\n        }\n    }\n\n    //#endregion\n\n    private serializer: Serializer = new Serializer();\n    private deserializer: Deserializer<T> = new Deserializer<T>();\n    private globalKnownTypes: Array<Constructor<any>> = [];\n    private indent: number = 0;\n    private rootConstructor: Constructor<T>;\n    private errorHandler: (e: Error) => void;\n    private nameResolver: (ctor: Function) => string;\n    private replacer?: (key: string, value: any) => any;\n\n    /**\n     * Creates a new TypedJSON instance to serialize (stringify) and deserialize (parse) object\n     *     instances of the specified root class type.\n     * @param rootType The constructor of the root class type.\n     * @param settings Additional configuration settings.\n     */\n    constructor(rootConstructor: Constructor<T>, settings?: ITypedJSONSettings)\n    {\n        let rootMetadata = JsonObjectMetadata.getFromConstructor(rootConstructor);\n\n        if (!rootMetadata || !rootMetadata.isExplicitlyMarked)\n        {\n            throw new TypeError(\"The TypedJSON root data type must have the @jsonObject decorator used.\");\n        }\n\n        this.nameResolver = (ctor) => Helpers.nameof(ctor);\n        this.rootConstructor = rootConstructor;\n        this.errorHandler = (error) => Helpers.logError(error);\n\n        if (settings)\n        {\n            this.config(settings);\n        }\n        else if (TypedJSON._globalConfig)\n        {\n            this.config({});\n        }\n    }\n\n    /**\n     * Configures TypedJSON through a settings object.\n     * @param settings The configuration settings object.\n     */\n    public config(settings: ITypedJSONSettings)\n    {\n        if (TypedJSON._globalConfig)\n        {\n            settings = {\n                ...TypedJSON._globalConfig,\n                ...settings\n            };\n\n            if (settings.knownTypes && TypedJSON._globalConfig.knownTypes)\n            {\n                // Merge known-types (also de-duplicate them, so Array -> Set -> Array).\n                settings.knownTypes = Array.from(new Set(\n                    settings.knownTypes.concat(TypedJSON._globalConfig.knownTypes),\n                ));\n            }\n        }\n\n        if (settings.errorHandler)\n        {\n            this.errorHandler = settings.errorHandler;\n            this.deserializer.setErrorHandler(settings.errorHandler);\n            this.serializer.setErrorHandler(settings.errorHandler);\n        }\n\n        if (settings.replacer) this.replacer = settings.replacer;\n        if (settings.typeResolver) this.deserializer.setTypeResolver(settings.typeResolver);\n        if (settings.typeHintEmitter) this.serializer.setTypeHintEmitter(settings.typeHintEmitter);\n        if (settings.indent) this.indent = settings.indent;\n\n        if (settings.nameResolver)\n        {\n            this.nameResolver = settings.nameResolver;\n            this.deserializer.setNameResolver(settings.nameResolver);\n            // this.serializer.set\n        }\n\n        if (settings.knownTypes)\n        {\n            // Type-check knownTypes elements to recognize errors in advance.\n            settings.knownTypes.forEach((knownType, i) =>\n            {\n                // tslint:disable-next-line:no-null-keyword\n                if (typeof knownType === \"undefined\" || knownType === null)\n                {\n                    Helpers.logWarning(\n                        `TypedJSON.config: 'knownTypes' contains an undefined/null value (element ${i}).`);\n                }\n            });\n\n            this.globalKnownTypes = settings.knownTypes;\n        }\n    }\n\n    /**\n     * Converts a JSON string to the root class type.\n     * @param object The JSON to parse and convert.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns Deserialized T or undefined if there were errors.\n     */\n    public parse(object: any): T|undefined\n    {\n        const jsonObj = parseToJSObject(object);\n\n        let rootMetadata = JsonObjectMetadata.getFromConstructor(this.rootConstructor);\n        let result: T|undefined;\n        let knownTypes = new Map<string, Function>();\n\n        this.globalKnownTypes.filter(ktc => ktc).forEach(knownTypeCtor =>\n        {\n            knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n        });\n\n        if (rootMetadata)\n        {\n            rootMetadata.knownTypes.forEach(knownTypeCtor =>\n            {\n                knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n            });\n        }\n\n        try\n        {\n            result = this.deserializer.convertSingleValue(jsonObj, {\n                selfConstructor: this.rootConstructor,\n                knownTypes: knownTypes,\n            }) as T;\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n\n        return result;\n    }\n\n    public parseAsArray(object: any, dimensions?: 1): T[];\n    public parseAsArray(object: any, dimensions: 2): T[][];\n    public parseAsArray(object: any, dimensions: 3): T[][][];\n    public parseAsArray(object: any, dimensions: 4): T[][][][];\n    public parseAsArray(object: any, dimensions: 5): T[][][][][];\n    public parseAsArray(object: any, dimensions: number): any[];\n    public parseAsArray(object: any, dimensions: number = 1): any[]\n    {\n        const jsonObj = parseToJSObject(object);\n        if (jsonObj instanceof Array)\n        {\n            return this.deserializer.convertAsArray(jsonObj, {\n                selfConstructor: Array,\n                elementConstructor: new Array(dimensions - 1)\n                    .fill(Array)\n                    .concat(this.rootConstructor),\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes),\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define an Array`\n                + `, but got ${typeof jsonObj}.`));\n        }\n\n        return [];\n    }\n\n    public parseAsSet(object: any): Set<T>\n    {\n        const jsonObj = parseToJSObject(object);\n        // A Set<T> is serialized as T[].\n        if (jsonObj instanceof Array)\n        {\n            return this.deserializer.convertAsSet(jsonObj, {\n                selfConstructor: Array,\n                elementConstructor: [this.rootConstructor],\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes)\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define a Set (using an Array)`\n                + `, but got ${typeof jsonObj}.`,\n            ));\n        }\n\n        return new Set<T>();\n    }\n\n    public parseAsMap<K>(object: any, keyConstructor: Constructor<K>): Map<K, T>\n    {\n        const jsonObj = parseToJSObject(object);\n        // A Set<T> is serialized as T[].\n        if (jsonObj instanceof Array)\n        {\n            return this.deserializer.convertAsMap(jsonObj, {\n                selfConstructor: Array,\n                elementConstructor: [this.rootConstructor],\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes),\n                keyConstructor: keyConstructor\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define a Set (using an Array)`\n                + `, but got ${typeof jsonObj}.`,\n            ));\n        }\n\n        return new Map<K, T>();\n    }\n\n    /**\n     * Converts an instance of the specified class type to a plain JSON object.\n     * @param object The instance to convert to a JSON string.\n     * @returns Serialized object or undefined if an error has occured.\n     */\n    public toPlainJson(object: T): Object|undefined\n    {\n        if (!(object as any instanceof this.rootConstructor))\n        {\n            this.errorHandler(new TypeError(\n                `Expected object type to be '${Helpers.nameof(this.rootConstructor)}'`\n                    + `, got '${Helpers.nameof(object.constructor)}'.`,\n            ));\n            return undefined;\n        }\n\n        try\n        {\n            return this.serializer.convertSingleValue(object, {\n                selfType: this.rootConstructor\n            });\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainArray(object: T[], dimensions?: 1): Object[];\n    public toPlainArray(object: T[][], dimensions: 2): Object[][];\n    public toPlainArray(object: T[][][], dimensions: 3): Object[][][];\n    public toPlainArray(object: T[][][][], dimensions: 4): Object[][][][];\n    public toPlainArray(object: T[][][][][], dimensions: 5): Object[][][][][];\n    public toPlainArray(object: any[], dimensions: 1|2|3|4|5 = 1): Object[]|undefined\n    {\n        try\n        {\n            const elementConstructorArray =\n                new Array(dimensions - 1).fill(Array).concat(this.rootConstructor);\n            return this.serializer.convertAsArray(object, elementConstructorArray);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainSet(object: Set<T>): Object[]|undefined\n    {\n        try\n        {\n            return this.serializer.convertAsSet(object, this.rootConstructor);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainMap<K>(object: Map<K, T>, keyConstructor: Constructor<K>): { key: any, value: any }[]|undefined\n    {\n        try\n        {\n            return this.serializer.convertAsMap(object, keyConstructor, this.rootConstructor);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    /**\n     * Converts an instance of the specified class type to a JSON string.\n     * @param object The instance to convert to a JSON string.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns String with the serialized object or an empty string if an error has occured, but\n     *     the errorHandler did not throw.\n     */\n    public stringify(object: T): string\n    {\n        const result = this.toPlainJson(object);\n        if (result === undefined) {\n            return '';\n        }\n        return JSON.stringify(result, this.replacer, this.indent);\n    }\n\n    public stringifyAsArray(object: T[], dimensions?: 1): string;\n    public stringifyAsArray(object: T[][], dimensions: 2): string;\n    public stringifyAsArray(object: T[][][], dimensions: 3): string;\n    public stringifyAsArray(object: T[][][][], dimensions: 4): string;\n    public stringifyAsArray(object: T[][][][][], dimensions: 5): string;\n    public stringifyAsArray(object: any[], dimensions: any): string\n    {\n        return JSON.stringify(this.toPlainArray(object, dimensions), this.replacer, this.indent);\n    }\n\n    public stringifyAsSet(object: Set<T>): string\n    {\n        return JSON.stringify(this.toPlainSet(object), this.replacer, this.indent);\n    }\n\n    public stringifyAsMap<K>(object: Map<K, T>, keyConstructor: Constructor<K>): string\n    {\n        return JSON.stringify(this.toPlainMap(object, keyConstructor), this.replacer, this.indent);\n    }\n\n    private _mapKnownTypes(constructors: Array<Constructor<any>>)\n    {\n        let map = new Map<string, Constructor<any>>();\n\n        constructors.filter(ctor => ctor).forEach(ctor => map.set(this.nameResolver(ctor), ctor));\n\n        return map;\n    }\n}\n\nexport { jsonObject } from \"./typedjson/json-object\";\nexport { jsonMember } from \"./typedjson/json-member\";\nexport { jsonArrayMember } from \"./typedjson/json-array-member\";\nexport { jsonSetMember } from \"./typedjson/json-set-member\";\nexport { jsonMapMember } from \"./typedjson/json-map-member\";\n"],"sourceRoot":""}